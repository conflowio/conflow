// Code generated by Basil. DO NOT EDIT.

package fixtures

import (
	"fmt"

	"github.com/opsidian/conflow/basil"
	"github.com/opsidian/conflow/basil/schema"
)

// BlockGeneratorInterpreter is the basil interpreter for the BlockGenerator block
type BlockGeneratorInterpreter struct {
	s schema.Schema
}

func (i BlockGeneratorInterpreter) Schema() schema.Schema {
	if i.s == nil {
		i.s = &schema.Object{
			Name: "BlockGenerator",
			Properties: map[string]schema.Schema{
				"id": &schema.String{
					Metadata: schema.Metadata{
						Annotations: map[string]string{"id": "true"},
						ReadOnly:    true,
					},
					Format: "basil.ID",
				},
				"items": &schema.Array{
					Items: &schema.Untyped{},
				},
				"result": &schema.Reference{
					Metadata: schema.Metadata{
						Annotations: map[string]string{"eval_stage": "init", "generated": "true"},
						Pointer:     true,
					},
					Ref: "http://basil.schema/github.com/opsidian/conflow/test/fixtures.BlockGeneratorResult",
				},
			},
			Required: []string{"items", "result"},
		}
	}
	return i.s
}

// Create creates a new BlockGenerator block
func (i BlockGeneratorInterpreter) CreateBlock(id basil.ID, blockCtx *basil.BlockContext) basil.Block {
	return &BlockGenerator{
		id:             id,
		blockPublisher: blockCtx.BlockPublisher(),
	}
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i BlockGeneratorInterpreter) ValueParamName() basil.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i BlockGeneratorInterpreter) ParseContext(ctx *basil.ParseContext) *basil.ParseContext {
	var nilBlock *BlockGenerator
	if b, ok := basil.Block(nilBlock).(basil.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i BlockGeneratorInterpreter) Param(b basil.Block, name basil.ID) interface{} {
	switch name {
	case "id":
		return b.(*BlockGenerator).id
	case "items":
		return b.(*BlockGenerator).items
	default:
		panic(fmt.Errorf("unexpected parameter %q in BlockGenerator", name))
	}
}

func (i BlockGeneratorInterpreter) SetParam(block basil.Block, name basil.ID, value interface{}) error {
	b := block.(*BlockGenerator)
	switch name {
	case "items":
		b.items = value.([]interface{})
	}
	return nil
}

func (i BlockGeneratorInterpreter) SetBlock(block basil.Block, name basil.ID, value interface{}) error {
	b := block.(*BlockGenerator)
	switch name {
	case "result":
		b.result = value.(*BlockGeneratorResult)
	}
	return nil
}
