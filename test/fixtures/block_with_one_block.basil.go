// Code generated by Basil. DO NOT EDIT.

package fixtures

import (
	"fmt"
	"github.com/opsidian/basil/basil"
	"github.com/opsidian/basil/basil/schema"
)

// BlockWithOneBlockInterpreter is the basil interpreter for the BlockWithOneBlock block
type BlockWithOneBlockInterpreter struct {
	s schema.Schema
}

func (i BlockWithOneBlockInterpreter) Schema() schema.Schema {
	if i.s == nil {
		i.s = &schema.Object{
			Properties: map[string]schema.Schema{
				"block": &schema.Reference{
					Metadata: schema.Metadata{
						Pointer: true,
					},
					Ref: "http://basil.schema/github.com/opsidian/basil/test/fixtures/Block",
				},
				"id_field": &schema.String{
					Metadata: schema.Metadata{
						Annotations: map[string]string{"id": "true"},
						ReadOnly:    true,
					},
					Format: "basil.ID",
				},
			},
			StructProperties: map[string]string{"block": "Block", "id_field": "IDField"},
		}
	}
	return i.s
}

// Create creates a new BlockWithOneBlock block
func (i BlockWithOneBlockInterpreter) CreateBlock(id basil.ID) basil.Block {
	return &BlockWithOneBlock{
		IDField: id,
	}
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i BlockWithOneBlockInterpreter) ValueParamName() basil.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i BlockWithOneBlockInterpreter) ParseContext(ctx *basil.ParseContext) *basil.ParseContext {
	var nilBlock *BlockWithOneBlock
	if b, ok := basil.Block(nilBlock).(basil.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i BlockWithOneBlockInterpreter) Param(b basil.Block, name basil.ID) interface{} {
	switch name {
	case "id_field":
		return b.(*BlockWithOneBlock).IDField
	default:
		panic(fmt.Errorf("unexpected parameter %q in BlockWithOneBlock", name))
	}
}

func (i BlockWithOneBlockInterpreter) SetParam(block basil.Block, name basil.ID, value interface{}) error {
	return nil
}

func (i BlockWithOneBlockInterpreter) SetBlock(block basil.Block, name basil.ID, value interface{}) error {
	b := block.(*BlockWithOneBlock)
	switch name {
	case "block":
		b.Block = value.(*Block)
	}
	return nil
}
