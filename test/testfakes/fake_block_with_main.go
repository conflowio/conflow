// Code generated by counterfeiter. DO NOT EDIT.
package testfakes

import (
	"sync"

	"github.com/opsidian/basil/basil"
	"github.com/opsidian/basil/test"
)

type FakeBlockWithMain struct {
	IDStub        func() basil.ID
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
	}
	iDReturns struct {
		result1 basil.ID
	}
	iDReturnsOnCall map[int]struct {
		result1 basil.ID
	}
	MainStub        func(basil.BlockContext) error
	mainMutex       sync.RWMutex
	mainArgsForCall []struct {
		arg1 basil.BlockContext
	}
	mainReturns struct {
		result1 error
	}
	mainReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlockWithMain) ID() basil.ID {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
	}{})
	fake.recordInvocation("ID", []interface{}{})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.iDReturns
	return fakeReturns.result1
}

func (fake *FakeBlockWithMain) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeBlockWithMain) IDCalls(stub func() basil.ID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = stub
}

func (fake *FakeBlockWithMain) IDReturns(result1 basil.ID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 basil.ID
	}{result1}
}

func (fake *FakeBlockWithMain) IDReturnsOnCall(i int, result1 basil.ID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 basil.ID
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 basil.ID
	}{result1}
}

func (fake *FakeBlockWithMain) Main(arg1 basil.BlockContext) error {
	fake.mainMutex.Lock()
	ret, specificReturn := fake.mainReturnsOnCall[len(fake.mainArgsForCall)]
	fake.mainArgsForCall = append(fake.mainArgsForCall, struct {
		arg1 basil.BlockContext
	}{arg1})
	fake.recordInvocation("Main", []interface{}{arg1})
	fake.mainMutex.Unlock()
	if fake.MainStub != nil {
		return fake.MainStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.mainReturns
	return fakeReturns.result1
}

func (fake *FakeBlockWithMain) MainCallCount() int {
	fake.mainMutex.RLock()
	defer fake.mainMutex.RUnlock()
	return len(fake.mainArgsForCall)
}

func (fake *FakeBlockWithMain) MainCalls(stub func(basil.BlockContext) error) {
	fake.mainMutex.Lock()
	defer fake.mainMutex.Unlock()
	fake.MainStub = stub
}

func (fake *FakeBlockWithMain) MainArgsForCall(i int) basil.BlockContext {
	fake.mainMutex.RLock()
	defer fake.mainMutex.RUnlock()
	argsForCall := fake.mainArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBlockWithMain) MainReturns(result1 error) {
	fake.mainMutex.Lock()
	defer fake.mainMutex.Unlock()
	fake.MainStub = nil
	fake.mainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockWithMain) MainReturnsOnCall(i int, result1 error) {
	fake.mainMutex.Lock()
	defer fake.mainMutex.Unlock()
	fake.MainStub = nil
	if fake.mainReturnsOnCall == nil {
		fake.mainReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mainReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockWithMain) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.mainMutex.RLock()
	defer fake.mainMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlockWithMain) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ test.BlockWithMain = new(FakeBlockWithMain)
