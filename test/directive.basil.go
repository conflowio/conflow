// Code generated by Basil. DO NOT EDIT.

package test

import (
	"fmt"
	"time"

	"github.com/opsidian/conflow/basil"
	"github.com/opsidian/conflow/basil/schema"
)

// DirectiveInterpreter is the basil interpreter for the Directive block
type DirectiveInterpreter struct {
	s schema.Schema
}

func (i DirectiveInterpreter) Schema() schema.Schema {
	if i.s == nil {
		i.s = &schema.Object{
			Name: "Directive",
			Properties: map[string]schema.Schema{
				"custom_field": &schema.String{},
				"field_array": &schema.Array{
					Items: &schema.Untyped{},
				},
				"field_bool":  &schema.Boolean{},
				"field_float": &schema.Number{},
				"field_int":   &schema.Integer{},
				"field_map": &schema.Map{
					AdditionalProperties: &schema.Untyped{},
				},
				"field_string":        &schema.String{},
				"field_time_duration": &schema.TimeDuration{},
				"id_field": &schema.String{
					Metadata: schema.Metadata{
						Annotations: map[string]string{"id": "true"},
						ReadOnly:    true,
					},
					Format: "basil.ID",
				},
				"testblock": &schema.Array{
					Items: &schema.Reference{
						Metadata: schema.Metadata{
							Pointer: true,
						},
						Ref: "http://basil.schema/github.com/opsidian/conflow/test.Block",
					},
				},
				"value": &schema.Untyped{
					Metadata: schema.Metadata{
						Annotations: map[string]string{"value": "true"},
					},
				},
			},
			PropertyNames: map[string]string{"custom_field": "FieldCustomName", "field_array": "FieldArray", "field_bool": "FieldBool", "field_float": "FieldFloat", "field_int": "FieldInt", "field_map": "FieldMap", "field_string": "FieldString", "field_time_duration": "FieldTimeDuration", "id_field": "IDField", "testblock": "Blocks", "value": "Value"},
		}
	}
	return i.s
}

// Create creates a new Directive block
func (i DirectiveInterpreter) CreateBlock(id basil.ID, blockCtx *basil.BlockContext) basil.Block {
	return &Directive{
		IDField: id,
	}
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i DirectiveInterpreter) ValueParamName() basil.ID {
	return "value"
}

// ParseContext returns with the parse context for the block
func (i DirectiveInterpreter) ParseContext(ctx *basil.ParseContext) *basil.ParseContext {
	var nilBlock *Directive
	if b, ok := basil.Block(nilBlock).(basil.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i DirectiveInterpreter) Param(b basil.Block, name basil.ID) interface{} {
	switch name {
	case "custom_field":
		return b.(*Directive).FieldCustomName
	case "field_array":
		return b.(*Directive).FieldArray
	case "field_bool":
		return b.(*Directive).FieldBool
	case "field_float":
		return b.(*Directive).FieldFloat
	case "field_int":
		return b.(*Directive).FieldInt
	case "field_map":
		return b.(*Directive).FieldMap
	case "field_string":
		return b.(*Directive).FieldString
	case "field_time_duration":
		return b.(*Directive).FieldTimeDuration
	case "id_field":
		return b.(*Directive).IDField
	case "value":
		return b.(*Directive).Value
	default:
		panic(fmt.Errorf("unexpected parameter %q in Directive", name))
	}
}

func (i DirectiveInterpreter) SetParam(block basil.Block, name basil.ID, value interface{}) error {
	b := block.(*Directive)
	switch name {
	case "custom_field":
		b.FieldCustomName = value.(string)
	case "field_array":
		b.FieldArray = value.([]interface{})
	case "field_bool":
		b.FieldBool = value.(bool)
	case "field_float":
		b.FieldFloat = value.(float64)
	case "field_int":
		b.FieldInt = value.(int64)
	case "field_map":
		b.FieldMap = value.(map[string]interface{})
	case "field_string":
		b.FieldString = value.(string)
	case "field_time_duration":
		b.FieldTimeDuration = value.(time.Duration)
	case "value":
		b.Value = value
	}
	return nil
}

func (i DirectiveInterpreter) SetBlock(block basil.Block, name basil.ID, value interface{}) error {
	b := block.(*Directive)
	switch name {
	case "testblock":
		b.Blocks = append(b.Blocks, value.(*Block))
	}
	return nil
}
