// Code generated by Basil. DO NOT EDIT.
package test

import (
	"fmt"

	"github.com/opsidian/basil/basil"
	"github.com/opsidian/basil/variable"
	"github.com/opsidian/parsley/parsley"
)

type TestBlockInterpreter struct{}

// Create creates a new TestBlock block
func (i TestBlockInterpreter) Create(ctx *basil.EvalContext, node basil.BlockNode) basil.Block {
	return &TestBlock{
		IDField: node.ID(),
	}
}

// Params returns with the list of valid parameters
func (i TestBlockInterpreter) Params() map[basil.ID]string {
	return map[basil.ID]string{
		"custom_field":        "string",
		"field_array":         "[]interface{}",
		"field_bool":          "bool",
		"field_float":         "float64",
		"field_int":           "int64",
		"field_map":           "map[string]interface{}",
		"field_string":        "string",
		"field_time_duration": "time.Duration",
		"value":               "interface{}",
	}
}

// RequiredParams returns with the list of required parameters
func (i TestBlockInterpreter) RequiredParams() map[basil.ID]bool {
	return nil
}

// HasForeignID returns true if the block ID is referencing an other block id
func (i TestBlockInterpreter) HasForeignID() bool {
	return false
}

// HasShortFormat returns true if the block can be defined in the short block format
func (i TestBlockInterpreter) ValueParamName() basil.ID {
	return "value"
}

// ParseContext returns with the parse context for the block
func (i TestBlockInterpreter) ParseContext(parentCtx *basil.ParseContext) *basil.ParseContext {
	var nilBlock *TestBlock
	if b, ok := basil.Block(nilBlock).(basil.ParseContextAware); ok {
		return b.ParseContext(parentCtx)
	}

	return parentCtx
}

func (i TestBlockInterpreter) Param(block basil.Block, name basil.ID) interface{} {
	b := block.(*TestBlock)

	switch name {
	case "id":
		return b.IDField
	case "value":
		return b.Value
	case "field_string":
		return b.FieldString
	case "field_int":
		return b.FieldInt
	case "field_float":
		return b.FieldFloat
	case "field_bool":
		return b.FieldBool
	case "field_array":
		return b.FieldArray
	case "field_map":
		return b.FieldMap
	case "field_time_duration":
		return b.FieldTimeDuration
	case "custom_field":
		return b.FieldCustomName
	default:
		panic(fmt.Errorf("unexpected parameter %q in TestBlock", name))
	}
}

func (i TestBlockInterpreter) SetParam(ctx *basil.EvalContext, block basil.Block, name basil.ID, node parsley.Node) parsley.Error {
	b := block.(*TestBlock)

	switch name {
	case "id":
		var err parsley.Error
		b.IDField, err = variable.NodeIdentifierValue(node, ctx)
		return err
	case "value":
		var err parsley.Error
		b.Value, err = variable.NodeAnyValue(node, ctx)
		return err
	case "field_string":
		var err parsley.Error
		b.FieldString, err = variable.NodeStringValue(node, ctx)
		return err
	case "field_int":
		var err parsley.Error
		b.FieldInt, err = variable.NodeIntegerValue(node, ctx)
		return err
	case "field_float":
		var err parsley.Error
		b.FieldFloat, err = variable.NodeFloatValue(node, ctx)
		return err
	case "field_bool":
		var err parsley.Error
		b.FieldBool, err = variable.NodeBoolValue(node, ctx)
		return err
	case "field_array":
		var err parsley.Error
		b.FieldArray, err = variable.NodeArrayValue(node, ctx)
		return err
	case "field_map":
		var err parsley.Error
		b.FieldMap, err = variable.NodeMapValue(node, ctx)
		return err
	case "field_time_duration":
		var err parsley.Error
		b.FieldTimeDuration, err = variable.NodeTimeDurationValue(node, ctx)
		return err
	case "custom_field":
		var err parsley.Error
		b.FieldCustomName, err = variable.NodeStringValue(node, ctx)
		return err
	case "testblock":
		value, err := node.Value(ctx)
		if err != nil {
			return err
		}
		b.Blocks = append(b.Blocks, value.(*TestBlock))
		return nil
	default:
		panic(fmt.Errorf("unexpected parameter or block %q in TestBlock", name))
	}
}
