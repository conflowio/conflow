// Code generated by Conflow. DO NOT EDIT.

package openapi

import (
	"fmt"

	"github.com/conflowio/conflow/pkg/conflow"
	"github.com/conflowio/conflow/pkg/conflow/annotations"
	"github.com/conflowio/conflow/pkg/conflow/types"
	"github.com/conflowio/conflow/pkg/schema"
)

func init() {
	schema.Register(&schema.Object{
		Metadata: schema.Metadata{
			Annotations: map[string]string{
				annotations.Type: "configuration",
			},
			ID: "github.com/conflowio/conflow/pkg/openapi.License",
		},
		FieldNames: map[string]string{"identifier": "Identifier", "name": "Name", "url": "URL"},
		Properties: map[string]schema.Schema{
			"identifier": &schema.String{},
			"name":       &schema.String{},
			"url": &schema.String{
				Format: "uri",
			},
		},
		Required: []string{"name"},
	})
}

// LicenseInterpreter is the Conflow interpreter for the License block
type LicenseInterpreter struct {
}

func (i LicenseInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/pkg/openapi.License")
	return s
}

// Create creates a new License block
func (i LicenseInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := &License{}
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i LicenseInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i LicenseInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *License
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i LicenseInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "identifier":
		return b.(*License).Identifier
	case "name":
		return b.(*License).Name
	case "url":
		return b.(*License).URL
	default:
		panic(fmt.Errorf("unexpected parameter %q in License", name))
	}
}

func (i LicenseInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*License)
	switch name {
	case "identifier":
		b.Identifier = value.(string)
	case "name":
		b.Name = value.(string)
	case "url":
		b.URL = value.(types.URL)
	}
	return nil
}

func (i LicenseInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	return nil
}
