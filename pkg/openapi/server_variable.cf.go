// Code generated by Conflow. DO NOT EDIT.

package openapi

import (
	"fmt"
	"github.com/conflowio/conflow/pkg/conflow"
	"github.com/conflowio/conflow/pkg/conflow/annotations"
	"github.com/conflowio/conflow/pkg/schema"
)

func init() {
	schema.Register(&schema.Object{
		Metadata: schema.Metadata{
			Annotations: map[string]string{
				annotations.Type: "configuration",
			},
			ID: "github.com/conflowio/conflow/pkg/openapi.ServerVariable",
		},
		FieldNames: map[string]string{"default": "Default", "description": "Description", "enum": "Enum"},
		Properties: map[string]schema.Schema{
			"default":     &schema.String{},
			"description": &schema.String{},
			"enum": &schema.Array{
				Items:    &schema.String{},
				MinItems: 1,
			},
		},
		Required: []string{"default"},
	})
}

// ServerVariableInterpreter is the Conflow interpreter for the ServerVariable block
type ServerVariableInterpreter struct {
}

func (i ServerVariableInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/pkg/openapi.ServerVariable")
	return s
}

// Create creates a new ServerVariable block
func (i ServerVariableInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := &ServerVariable{}
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i ServerVariableInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i ServerVariableInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *ServerVariable
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i ServerVariableInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "default":
		return b.(*ServerVariable).Default
	case "description":
		return b.(*ServerVariable).Description
	case "enum":
		return b.(*ServerVariable).Enum
	default:
		panic(fmt.Errorf("unexpected parameter %q in ServerVariable", name))
	}
}

func (i ServerVariableInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*ServerVariable)
	switch name {
	case "default":
		b.Default = value.(string)
	case "description":
		b.Description = value.(string)
	case "enum":
		b.Enum = make([]string, len(value.([]interface{})))
		for valuek, valuev := range value.([]interface{}) {
			b.Enum[valuek] = valuev.(string)
		}
	}
	return nil
}

func (i ServerVariableInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	return nil
}
