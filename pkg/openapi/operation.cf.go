// Code generated by Conflow. DO NOT EDIT.

package openapi

import (
	"fmt"

	"github.com/conflowio/conflow/pkg/conflow"
	"github.com/conflowio/conflow/pkg/conflow/annotations"
	"github.com/conflowio/conflow/pkg/schema"
)

func init() {
	schema.Register(&schema.Object{
		Metadata: schema.Metadata{
			Annotations: map[string]string{
				annotations.Type: "configuration",
			},
			ID: "github.com/conflowio/conflow/pkg/openapi.Operation",
		},
		FieldNames:     map[string]string{"deprecated": "Deprecated", "description": "Description", "operationId": "OperationID", "parameters": "Parameters", "requestBody": "RequestBody", "responses": "Responses", "servers": "Servers", "summary": "Summary", "tags": "Tags"},
		ParameterNames: map[string]string{"operationId": "operation_id", "parameters": "parameter", "requestBody": "request_body", "responses": "response", "servers": "server"},
		Properties: map[string]schema.Schema{
			"deprecated":  &schema.Boolean{},
			"description": &schema.String{},
			"operationId": &schema.String{},
			"parameters": &schema.Array{
				Items: &schema.Reference{
					Nullable: true,
					Ref:      "github.com/conflowio/conflow/pkg/openapi.Parameter",
				},
			},
			"requestBody": &schema.Reference{
				Nullable: true,
				Ref:      "github.com/conflowio/conflow/pkg/openapi.RequestBody",
			},
			"responses": &schema.Map{
				AdditionalProperties: &schema.Reference{
					Nullable: true,
					Ref:      "github.com/conflowio/conflow/pkg/openapi.Response",
				},
			},
			"servers": &schema.Array{
				Items: &schema.Reference{
					Nullable: true,
					Ref:      "github.com/conflowio/conflow/pkg/openapi.Server",
				},
			},
			"summary": &schema.String{},
			"tags": &schema.Array{
				Items: &schema.String{},
			},
		},
		Required: []string{"operation_id"},
	})
}

// NewOperationWithDefaults creates a new Operation instance with default values
func NewOperationWithDefaults() *Operation {
	b := &Operation{}
	b.Responses = map[string]*Response{}
	return b
}

// OperationInterpreter is the Conflow interpreter for the Operation block
type OperationInterpreter struct {
}

func (i OperationInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/pkg/openapi.Operation")
	return s
}

// Create creates a new Operation block
func (i OperationInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := NewOperationWithDefaults()
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i OperationInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i OperationInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *Operation
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i OperationInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "deprecated":
		return b.(*Operation).Deprecated
	case "description":
		return b.(*Operation).Description
	case "operation_id":
		return b.(*Operation).OperationID
	case "summary":
		return b.(*Operation).Summary
	case "tags":
		return b.(*Operation).Tags
	default:
		panic(fmt.Errorf("unexpected parameter %q in Operation", name))
	}
}

func (i OperationInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*Operation)
	switch name {
	case "deprecated":
		b.Deprecated = schema.Value[bool](value)
	case "description":
		b.Description = schema.Value[string](value)
	case "operation_id":
		b.OperationID = schema.Value[string](value)
	case "summary":
		b.Summary = schema.Value[string](value)
	case "tags":
		b.Tags = make([]string, len(value.([]interface{})))
		for valuek, valuev := range value.([]interface{}) {
			b.Tags[valuek] = schema.Value[string](valuev)
		}
	}
	return nil
}

func (i OperationInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	b := block.(*Operation)
	switch name {
	case "parameter":
		b.Parameters = append(b.Parameters, value.(*Parameter))
	case "request_body":
		b.RequestBody = value.(*RequestBody)
	case "response":
		b.Responses[key] = value.(*Response)
	case "server":
		b.Servers = append(b.Servers, value.(*Server))
	}
	return nil
}
