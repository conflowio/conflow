// Code generated by Conflow. DO NOT EDIT.

package openapi

import (
	"fmt"
	"github.com/conflowio/conflow/pkg/conflow"
	"github.com/conflowio/conflow/pkg/conflow/annotations"
	"github.com/conflowio/conflow/pkg/schema"
)

func init() {
	schema.Register(&schema.Object{
		Metadata: schema.Metadata{
			Annotations: map[string]string{
				annotations.Type: "configuration",
			},
			ID: "github.com/conflowio/conflow/pkg/openapi.Info",
		},
		FieldNames:     map[string]string{"contact": "Contact", "description": "Description", "license": "License", "summary": "Summary", "termsOfService": "TermsOfService", "title": "Title", "version": "Version"},
		ParameterNames: map[string]string{"termsOfService": "terms_of_service"},
		Properties: map[string]schema.Schema{
			"contact": &schema.Reference{
				Nullable: true,
				Ref:      "github.com/conflowio/conflow/pkg/openapi.Contact",
			},
			"description": &schema.String{},
			"license": &schema.Reference{
				Nullable: true,
				Ref:      "github.com/conflowio/conflow/pkg/openapi.License",
			},
			"summary":        &schema.String{},
			"termsOfService": &schema.String{},
			"title":          &schema.String{},
			"version":        &schema.String{},
		},
		Required: []string{"title", "version"},
	})
}

// InfoInterpreter is the Conflow interpreter for the Info block
type InfoInterpreter struct {
}

func (i InfoInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/pkg/openapi.Info")
	return s
}

// Create creates a new Info block
func (i InfoInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := &Info{}
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i InfoInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i InfoInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *Info
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i InfoInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "description":
		return b.(*Info).Description
	case "summary":
		return b.(*Info).Summary
	case "terms_of_service":
		return b.(*Info).TermsOfService
	case "title":
		return b.(*Info).Title
	case "version":
		return b.(*Info).Version
	default:
		panic(fmt.Errorf("unexpected parameter %q in Info", name))
	}
}

func (i InfoInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*Info)
	switch name {
	case "description":
		b.Description = value.(string)
	case "summary":
		b.Summary = value.(string)
	case "terms_of_service":
		b.TermsOfService = value.(string)
	case "title":
		b.Title = value.(string)
	case "version":
		b.Version = value.(string)
	}
	return nil
}

func (i InfoInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	b := block.(*Info)
	switch name {
	case "contact":
		b.Contact = value.(*Contact)
	case "license":
		b.License = value.(*License)
	}
	return nil
}
