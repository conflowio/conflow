// Code generated by Conflow. DO NOT EDIT.

package functions

import (
	"github.com/conflowio/conflow/pkg/schema"
)

func init() {
	schema.Register(&schema.Function{
		Metadata: schema.Metadata{
			Description: "It returns with the length of the variable\nFor strings it means the count of UTF-8 characters\nFor arrays and maps it means the number of items/entries",
			ID:          "github.com/conflowio/conflow/pkg/functions.Len",
		},
		Parameters: schema.Parameters{
			schema.NamedSchema{
				Name: "value",
				Schema: &schema.OneOf{
					Schemas: []schema.Schema{
						&schema.Array{
							Items: &schema.Any{},
						},
						&schema.Map{
							AdditionalProperties: &schema.Any{},
						},
						&schema.String{},
					},
				},
			},
		},
		Result: &schema.Integer{},
	})
}

// LenInterpreter is the Conflow interpreter for the Len function
type LenInterpreter struct {
}

func (i LenInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/pkg/functions.Len")
	return s
}

// Eval returns with the result of the function
func (i LenInterpreter) Eval(ctx interface{}, args []interface{}) (interface{}, error) {
	var val0 = args[0]
	return Len(val0), nil
}
