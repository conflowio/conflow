// Code generated by Conflow. DO NOT EDIT.

package strings

import (
	"github.com/conflowio/conflow/pkg/schema"
)

func init() {
	schema.Register(&schema.Function{
		Metadata: schema.Metadata{
			Description: "It slices s into all substrings separated by sep and returns a slice of\nthe substrings between those separators.\n\nIf s does not contain sep and sep is not empty, Split returns a\nslice of length 1 whose only element is s.\n\nIf sep is empty, Split splits after each UTF-8 sequence. If both s\nand sep are empty, Split returns an empty slice.",
			ID:          "github.com/conflowio/conflow/pkg/functions/strings.Split",
		},
		Parameters: schema.Parameters{
			schema.NamedSchema{
				Name:   "s",
				Schema: &schema.String{},
			},
			schema.NamedSchema{
				Name:   "sep",
				Schema: &schema.String{},
			},
		},
		Result: &schema.Array{
			Items: &schema.Any{},
		},
	})
}

// SplitInterpreter is the Conflow interpreter for the Split function
type SplitInterpreter struct {
}

func (i SplitInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/pkg/functions/strings.Split")
	return s
}

// Eval returns with the result of the function
func (i SplitInterpreter) Eval(ctx interface{}, args []interface{}) (interface{}, error) {
	var val0 = schema.Value[string](args[0])
	var val1 = schema.Value[string](args[1])
	return Split(val0, val1), nil
}
