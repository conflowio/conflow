// Code generated by Conflow. DO NOT EDIT.

package strings

import (
	"github.com/conflowio/conflow/pkg/schema"
)

func init() {
	schema.Register(&schema.Function{
		Metadata: schema.Metadata{
			Description: "It formats according to a format specifier and returns the resulting string.",
			ID:          "github.com/conflowio/conflow/pkg/functions/strings.Format",
		},
		AdditionalParameters: &schema.NamedSchema{
			Name:   "values",
			Schema: &schema.Any{},
		},
		Parameters: schema.Parameters{
			schema.NamedSchema{
				Name:   "format",
				Schema: &schema.String{},
			},
		},
		Result: &schema.String{},
	})
}

// FormatInterpreter is the Conflow interpreter for the Format function
type FormatInterpreter struct {
}

func (i FormatInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/pkg/functions/strings.Format")
	return s
}

// Eval returns with the result of the function
func (i FormatInterpreter) Eval(ctx interface{}, args []interface{}) (interface{}, error) {
	var val0 = args[0].(string)
	var variadicArgs []interface{}
	for p := 1; p < len(args); p++ {
		var val = args[p]
		variadicArgs = append(variadicArgs, val)
	}
	return Format(val0, variadicArgs...), nil
}
