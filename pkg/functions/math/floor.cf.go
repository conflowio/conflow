// Code generated by Conflow. DO NOT EDIT.

package math

import (
	"github.com/conflowio/conflow/pkg/schema"
)

func init() {
	schema.Register(&schema.Function{
		Metadata: schema.Metadata{
			Description: "It returns the greatest integer value less than or equal to x.",
			ID:          "github.com/conflowio/conflow/pkg/functions/math.Floor",
		},
		Parameters: schema.Parameters{
			schema.NamedSchema{
				Name: "number",
				Schema: &schema.Any{
					Types: []string{"integer", "number"},
				},
			},
		},
		Result: &schema.Integer{},
	})
}

// FloorInterpreter is the Conflow interpreter for the Floor function
type FloorInterpreter struct {
}

func (i FloorInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/pkg/functions/math.Floor")
	return s
}

// Eval returns with the result of the function
func (i FloorInterpreter) Eval(ctx interface{}, args []interface{}) (interface{}, error) {
	var val0 = args[0]
	return Floor(val0), nil
}
