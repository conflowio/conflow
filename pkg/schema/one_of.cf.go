// Code generated by Conflow. DO NOT EDIT.

package schema

import (
	"github.com/conflowio/conflow/pkg/conflow/annotations"
)

func init() {
	Register(&Object{
		Metadata: Metadata{
			Annotations: map[string]string{
				annotations.Type: "configuration",
			},
			ID: "github.com/conflowio/conflow/pkg/schema.OneOf",
		},
		FieldNames:     map[string]string{"$id": "ID", "const": "Const", "default": "Default", "deprecated": "Deprecated", "description": "Description", "enum": "Enum", "examples": "Examples", "nullable": "Nullable", "oneOf": "Schemas", "readOnly": "ReadOnly", "title": "Title", "writeOnly": "WriteOnly", "x-annotations": "Annotations"},
		ParameterNames: map[string]string{"$id": "id", "oneOf": "schema", "readOnly": "read_only", "writeOnly": "write_only", "x-annotations": "annotations"},
		Properties: map[string]Schema{
			"$id":         &String{},
			"const":       &Any{},
			"default":     &Any{},
			"deprecated":  &Boolean{},
			"description": &String{},
			"enum": &Array{
				Items: &Any{},
			},
			"examples": &Array{
				Items: &Any{},
			},
			"nullable": &Boolean{},
			"oneOf": &Array{
				Items: &Reference{
					Ref: "github.com/conflowio/conflow/pkg/schema.Schema",
				},
				MinItems: 1,
			},
			"readOnly":  &Boolean{},
			"title":     &String{},
			"writeOnly": &Boolean{},
			"x-annotations": &Map{
				AdditionalProperties: &String{},
			},
		},
		Required: []string{"schema"},
	})
}

// NewOneOfWithDefaults creates a new OneOf instance with default values
func NewOneOfWithDefaults() *OneOf {
	b := &OneOf{}
	return b
}
