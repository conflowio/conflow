// Code generated by Conflow. DO NOT EDIT.

package directives

import (
	"fmt"

	"github.com/conflowio/conflow/pkg/conflow"
	"github.com/conflowio/conflow/pkg/conflow/annotations"
	"github.com/conflowio/conflow/pkg/schema"
)

func init() {
	schema.Register(&schema.Object{
		Metadata: schema.Metadata{
			Annotations: map[string]string{
				annotations.Type: "directive",
			},
			ID: "github.com/conflowio/conflow/pkg/schema/directives.OneOf",
		},
		ParameterNames: map[string]string{"schemas": "schema"},
		Properties: map[string]schema.Schema{
			"id": &schema.String{
				Metadata: schema.Metadata{
					Annotations: map[string]string{
						annotations.ID: "true",
					},
					ReadOnly: true,
				},
				Format: "conflow.ID",
			},
			"schemas": &schema.Array{
				Metadata: schema.Metadata{
					Annotations: map[string]string{
						annotations.Value: "true",
					},
				},
				Items: &schema.Reference{
					Ref: "github.com/conflowio/conflow/pkg/schema.Schema",
				},
			},
		},
	})
}

// NewOneOfWithDefaults creates a new OneOf instance with default values
func NewOneOfWithDefaults() *OneOf {
	b := &OneOf{}
	return b
}

// OneOfInterpreter is the Conflow interpreter for the OneOf block
type OneOfInterpreter struct {
}

func (i OneOfInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/pkg/schema/directives.OneOf")
	return s
}

// Create creates a new OneOf block
func (i OneOfInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := NewOneOfWithDefaults()
	b.id = id
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i OneOfInterpreter) ValueParamName() conflow.ID {
	return "schema"
}

// ParseContext returns with the parse context for the block
func (i OneOfInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *OneOf
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i OneOfInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "id":
		return b.(*OneOf).id
	default:
		panic(fmt.Errorf("unexpected parameter %q in OneOf", name))
	}
}

func (i OneOfInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	return nil
}

func (i OneOfInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	b := block.(*OneOf)
	switch name {
	case "schema":
		b.schemas = append(b.schemas, value.(schema.Schema))
	}
	return nil
}
