// Code generated by Conflow. DO NOT EDIT.

package interpreters

import (
	"fmt"
	"github.com/conflowio/conflow/pkg/conflow"
	"github.com/conflowio/conflow/pkg/conflow/annotations"
	"github.com/conflowio/conflow/pkg/schema"
)

func init() {
	schema.Register(&schema.Object{
		Metadata: schema.Metadata{
			Annotations: map[string]string{
				annotations.Type: "configuration",
			},
			ID: "github.com/conflowio/conflow/pkg/schema.Array",
		},
		FieldNames:     map[string]string{"$id": "ID", "const": "Const", "default": "Default", "deprecated": "Deprecated", "description": "Description", "enum": "Enum", "examples": "Examples", "items": "Items", "maxItems": "MaxItems", "minItems": "MinItems", "readOnly": "ReadOnly", "title": "Title", "uniqueItems": "UniqueItems", "writeOnly": "WriteOnly", "x-annotations": "Annotations"},
		ParameterNames: map[string]string{"$id": "id", "maxItems": "max_items", "minItems": "min_items", "readOnly": "read_only", "uniqueItems": "unique_items", "writeOnly": "write_only", "x-annotations": "annotations"},
		Properties: map[string]schema.Schema{
			"$id": &schema.String{},
			"const": &schema.Array{
				Items: &schema.Any{},
			},
			"default": &schema.Array{
				Items: &schema.Any{},
			},
			"deprecated":  &schema.Boolean{},
			"description": &schema.String{},
			"enum": &schema.Array{
				Items: &schema.Array{
					Items: &schema.Any{},
				},
			},
			"examples": &schema.Array{
				Items: &schema.Any{},
			},
			"items": &schema.Reference{
				Ref: "github.com/conflowio/conflow/pkg/schema.Schema",
			},
			"maxItems": &schema.Integer{
				Nullable: true,
			},
			"minItems":    &schema.Integer{},
			"readOnly":    &schema.Boolean{},
			"title":       &schema.String{},
			"uniqueItems": &schema.Boolean{},
			"writeOnly":   &schema.Boolean{},
			"x-annotations": &schema.Map{
				AdditionalProperties: &schema.String{},
			},
		},
		Required: []string{"items"},
	})
}

// ArrayInterpreter is the Conflow interpreter for the Array block
type ArrayInterpreter struct {
}

func (i ArrayInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/pkg/schema.Array")
	return s
}

// Create creates a new Array block
func (i ArrayInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := &schema.Array{}
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i ArrayInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i ArrayInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *schema.Array
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i ArrayInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "id":
		return b.(*schema.Array).ID
	case "const":
		return b.(*schema.Array).Const
	case "default":
		return b.(*schema.Array).Default
	case "deprecated":
		return b.(*schema.Array).Deprecated
	case "description":
		return b.(*schema.Array).Description
	case "enum":
		return b.(*schema.Array).Enum
	case "examples":
		return b.(*schema.Array).Examples
	case "max_items":
		return b.(*schema.Array).MaxItems
	case "min_items":
		return b.(*schema.Array).MinItems
	case "read_only":
		return b.(*schema.Array).ReadOnly
	case "title":
		return b.(*schema.Array).Title
	case "unique_items":
		return b.(*schema.Array).UniqueItems
	case "write_only":
		return b.(*schema.Array).WriteOnly
	case "annotations":
		return b.(*schema.Array).Annotations
	default:
		panic(fmt.Errorf("unexpected parameter %q in Array", name))
	}
}

func (i ArrayInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*schema.Array)
	switch name {
	case "id":
		b.ID = value.(string)
	case "const":
		b.Const = value.([]interface{})
	case "default":
		b.Default = value.([]interface{})
	case "deprecated":
		b.Deprecated = value.(bool)
	case "description":
		b.Description = value.(string)
	case "enum":
		b.Enum = make([][]interface{}, len(value.([]interface{})))
		for valuek, valuev := range value.([]interface{}) {
			b.Enum[valuek] = valuev.([]interface{})
		}
	case "examples":
		b.Examples = value.([]interface{})
	case "max_items":
		b.MaxItems = schema.Pointer(value.(int64))
	case "min_items":
		b.MinItems = value.(int64)
	case "read_only":
		b.ReadOnly = value.(bool)
	case "title":
		b.Title = value.(string)
	case "unique_items":
		b.UniqueItems = value.(bool)
	case "write_only":
		b.WriteOnly = value.(bool)
	case "annotations":
		b.Annotations = make(map[string]string, len(value.(map[string]interface{})))
		for valuek, valuev := range value.(map[string]interface{}) {
			b.Annotations[valuek] = valuev.(string)
		}
	}
	return nil
}

func (i ArrayInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	b := block.(*schema.Array)
	switch name {
	case "items":
		b.Items = value.(schema.Schema)
	}
	return nil
}
