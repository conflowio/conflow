// Code generated by Conflow. DO NOT EDIT.

package interpreters

import (
	"fmt"

	"github.com/conflowio/conflow/pkg/conflow"
	"github.com/conflowio/conflow/pkg/schema"
)

// AnyOfInterpreter is the Conflow interpreter for the AnyOf block
type AnyOfInterpreter struct {
}

func (i AnyOfInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/pkg/schema.AnyOf")
	return s
}

// Create creates a new AnyOf block
func (i AnyOfInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := schema.NewAnyOfWithDefaults()
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i AnyOfInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i AnyOfInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *schema.AnyOf
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i AnyOfInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "id":
		return b.(*schema.AnyOf).ID
	case "const":
		return b.(*schema.AnyOf).Const
	case "default":
		return b.(*schema.AnyOf).Default
	case "deprecated":
		return b.(*schema.AnyOf).Deprecated
	case "description":
		return b.(*schema.AnyOf).Description
	case "enum":
		return b.(*schema.AnyOf).Enum
	case "examples":
		return b.(*schema.AnyOf).Examples
	case "nullable":
		return b.(*schema.AnyOf).Nullable
	case "read_only":
		return b.(*schema.AnyOf).ReadOnly
	case "title":
		return b.(*schema.AnyOf).Title
	case "write_only":
		return b.(*schema.AnyOf).WriteOnly
	case "annotations":
		return b.(*schema.AnyOf).Annotations
	default:
		panic(fmt.Errorf("unexpected parameter %q in AnyOf", name))
	}
}

func (i AnyOfInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*schema.AnyOf)
	switch name {
	case "id":
		b.ID = schema.Value[string](value)
	case "const":
		b.Const = value
	case "default":
		b.Default = value
	case "deprecated":
		b.Deprecated = schema.Value[bool](value)
	case "description":
		b.Description = schema.Value[string](value)
	case "enum":
		b.Enum = value.([]interface{})
	case "examples":
		b.Examples = value.([]interface{})
	case "nullable":
		b.Nullable = schema.Value[bool](value)
	case "read_only":
		b.ReadOnly = schema.Value[bool](value)
	case "title":
		b.Title = schema.Value[string](value)
	case "write_only":
		b.WriteOnly = schema.Value[bool](value)
	case "annotations":
		b.Annotations = make(map[string]string, len(value.(map[string]interface{})))
		for valuek, valuev := range value.(map[string]interface{}) {
			b.Annotations[valuek] = schema.Value[string](valuev)
		}
	}
	return nil
}

func (i AnyOfInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	b := block.(*schema.AnyOf)
	switch name {
	case "schema":
		b.Schemas = append(b.Schemas, value.(schema.Schema))
	}
	return nil
}
