// Code generated by Conflow. DO NOT EDIT.

package interpreters

import (
	"fmt"

	"github.com/conflowio/conflow/pkg/conflow"
	"github.com/conflowio/conflow/pkg/schema"
)

// ObjectInterpreter is the Conflow interpreter for the Object block
type ObjectInterpreter struct {
}

func (i ObjectInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/pkg/schema.Object")
	return s
}

// Create creates a new Object block
func (i ObjectInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := schema.NewObjectWithDefaults()
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i ObjectInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i ObjectInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *schema.Object
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i ObjectInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "id":
		return b.(*schema.Object).ID
	case "const":
		return b.(*schema.Object).Const
	case "default":
		return b.(*schema.Object).Default
	case "dependent_required":
		return b.(*schema.Object).DependentRequired
	case "deprecated":
		return b.(*schema.Object).Deprecated
	case "description":
		return b.(*schema.Object).Description
	case "enum":
		return b.(*schema.Object).Enum
	case "examples":
		return b.(*schema.Object).Examples
	case "max_properties":
		return b.(*schema.Object).MaxProperties
	case "min_properties":
		return b.(*schema.Object).MinProperties
	case "nullable":
		return b.(*schema.Object).Nullable
	case "read_only":
		return b.(*schema.Object).ReadOnly
	case "required":
		return b.(*schema.Object).Required
	case "title":
		return b.(*schema.Object).Title
	case "write_only":
		return b.(*schema.Object).WriteOnly
	case "annotations":
		return b.(*schema.Object).Annotations
	case "field_names":
		return b.(*schema.Object).FieldNames
	case "parameter_names":
		return b.(*schema.Object).ParameterNames
	default:
		panic(fmt.Errorf("unexpected parameter %q in Object", name))
	}
}

func (i ObjectInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*schema.Object)
	switch name {
	case "id":
		b.ID = schema.Value[string](value)
	case "const":
		b.Const = value.(map[string]interface{})
	case "default":
		b.Default = value.(map[string]interface{})
	case "dependent_required":
		b.DependentRequired = make(map[string][]string, len(value.(map[string]interface{})))
		for valuek, valuev := range value.(map[string]interface{}) {
			b.DependentRequired[valuek] = make([]string, len(valuev.([]interface{})))
			for valuevk, valuevv := range valuev.([]interface{}) {
				b.DependentRequired[valuek][valuevk] = schema.Value[string](valuevv)
			}
		}
	case "deprecated":
		b.Deprecated = schema.Value[bool](value)
	case "description":
		b.Description = schema.Value[string](value)
	case "enum":
		b.Enum = make([]map[string]interface{}, len(value.([]interface{})))
		for valuek, valuev := range value.([]interface{}) {
			b.Enum[valuek] = valuev.(map[string]interface{})
		}
	case "examples":
		b.Examples = value.([]interface{})
	case "max_properties":
		b.MaxProperties = schema.PointerValue[int64](value)
	case "min_properties":
		b.MinProperties = schema.Value[int64](value)
	case "nullable":
		b.Nullable = schema.Value[bool](value)
	case "read_only":
		b.ReadOnly = schema.Value[bool](value)
	case "required":
		b.Required = make([]string, len(value.([]interface{})))
		for valuek, valuev := range value.([]interface{}) {
			b.Required[valuek] = schema.Value[string](valuev)
		}
	case "title":
		b.Title = schema.Value[string](value)
	case "write_only":
		b.WriteOnly = schema.Value[bool](value)
	case "annotations":
		b.Annotations = make(map[string]string, len(value.(map[string]interface{})))
		for valuek, valuev := range value.(map[string]interface{}) {
			b.Annotations[valuek] = schema.Value[string](valuev)
		}
	case "field_names":
		b.FieldNames = make(map[string]string, len(value.(map[string]interface{})))
		for valuek, valuev := range value.(map[string]interface{}) {
			b.FieldNames[valuek] = schema.Value[string](valuev)
		}
	case "parameter_names":
		b.ParameterNames = make(map[string]string, len(value.(map[string]interface{})))
		for valuek, valuev := range value.(map[string]interface{}) {
			b.ParameterNames[valuek] = schema.Value[string](valuev)
		}
	}
	return nil
}

func (i ObjectInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	b := block.(*schema.Object)
	switch name {
	case "property":
		b.Properties[key] = value.(schema.Schema)
	}
	return nil
}
