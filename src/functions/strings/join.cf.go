// Code generated by Conflow. DO NOT EDIT.

package strings

import (
	"github.com/conflowio/conflow/src/schema"
)

func init() {
	schema.Register(&schema.Function{
		Metadata: schema.Metadata{
			Description: "It concatenates the elements of an array to create a single string. The separator string\nsep is placed between elements in the resulting string.",
			ID:          "github.com/conflowio/conflow/src/functions/strings.Join",
		},
		Parameters: schema.Parameters{
			schema.NamedSchema{
				Name: "a",
				Schema: &schema.Array{
					Items: &schema.String{},
				},
			},
			schema.NamedSchema{
				Name:   "sep",
				Schema: &schema.String{},
			},
		},
		Result: &schema.String{},
	})
}

// JoinInterpreter is the Conflow interpreter for the Join function
type JoinInterpreter struct {
}

func (i JoinInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/src/functions/strings.Join")
	return s
}

// Eval returns with the result of the function
func (i JoinInterpreter) Eval(ctx interface{}, args []interface{}) (interface{}, error) {
	var val0 = make([]string, len(args[0].([]interface{})))
	for args0k, args0v := range args[0].([]interface{}) {
		val0[args0k] = args0v.(string)
	}
	var val1 = args[1].(string)
	return Join(val0, val1), nil
}
