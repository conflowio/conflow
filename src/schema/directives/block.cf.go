// Code generated by Conflow. DO NOT EDIT.

package directives

import (
	"fmt"
	"github.com/conflowio/conflow/src/conflow"
	"github.com/conflowio/conflow/src/conflow/annotations"
	"github.com/conflowio/conflow/src/schema"
)

func init() {
	schema.Register(&schema.Object{
		Metadata: schema.Metadata{
			Annotations: map[string]string{
				annotations.Type: "directive",
			},
			Description: "It is the directive for marking structs as conflow blocks",
			ID:          "github.com/conflowio/conflow/src/schema/directives.Block",
		},
		JSONPropertyNames: map[string]string{"eval_stage": "EvalStage", "path": "Path", "type": "Type"},
		Name:              "Block",
		Parameters: map[string]schema.Schema{
			"eval_stage": &schema.String{
				Enum: []string{"ignore", "init", "parse", "resolve"},
			},
			"id": &schema.String{
				Metadata: schema.Metadata{
					Annotations: map[string]string{
						annotations.ID: "true",
					},
					ReadOnly: true,
				},
				Format: "conflow.ID",
			},
			"path": &schema.String{},
			"type": &schema.String{
				Metadata: schema.Metadata{
					Annotations: map[string]string{
						annotations.Value: "true",
					},
				},
				Enum: []string{"configuration", "directive", "generator", "main", "task"},
			},
		},
		Required: []string{"type"},
	})
}

// BlockInterpreter is the Conflow interpreter for the Block block
type BlockInterpreter struct {
}

func (i BlockInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/src/schema/directives.Block")
	return s
}

// Create creates a new Block block
func (i BlockInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := &Block{}
	b.id = id
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i BlockInterpreter) ValueParamName() conflow.ID {
	return "type"
}

// ParseContext returns with the parse context for the block
func (i BlockInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *Block
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i BlockInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "eval_stage":
		return b.(*Block).EvalStage
	case "id":
		return b.(*Block).id
	case "path":
		return b.(*Block).Path
	case "type":
		return b.(*Block).Type
	default:
		panic(fmt.Errorf("unexpected parameter %q in Block", name))
	}
}

func (i BlockInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*Block)
	switch name {
	case "eval_stage":
		b.EvalStage = value.(string)
	case "path":
		b.Path = value.(string)
	case "type":
		b.Type = value.(string)
	}
	return nil
}

func (i BlockInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	return nil
}
