// Code generated by Conflow. DO NOT EDIT.

package interpreters

import (
	"fmt"
	"github.com/conflowio/conflow/src/conflow"
	"github.com/conflowio/conflow/src/conflow/annotations"
	"github.com/conflowio/conflow/src/schema"
)

func init() {
	schema.Register(&schema.Object{
		Metadata: schema.Metadata{
			Annotations: map[string]string{
				annotations.Type: "configuration",
			},
			ID: "github.com/conflowio/conflow/src/schema.Reference",
		},
		FieldNames:     map[string]string{"$id": "ID", "$ref": "Ref", "deprecated": "Deprecated", "description": "Description", "examples": "Examples", "nullable": "Nullable", "readOnly": "ReadOnly", "title": "Title", "writeOnly": "WriteOnly", "x-annotations": "Annotations"},
		ParameterNames: map[string]string{"$id": "id", "$ref": "ref", "readOnly": "read_only", "writeOnly": "write_only", "x-annotations": "annotations"},
		Properties: map[string]schema.Schema{
			"$id": &schema.String{},
			"$ref": &schema.String{
				Metadata: schema.Metadata{
					Annotations: map[string]string{
						annotations.Value: "true",
					},
				},
			},
			"deprecated":  &schema.Boolean{},
			"description": &schema.String{},
			"examples": &schema.Array{
				Items: &schema.Any{},
			},
			"nullable":  &schema.Boolean{},
			"readOnly":  &schema.Boolean{},
			"title":     &schema.String{},
			"writeOnly": &schema.Boolean{},
			"x-annotations": &schema.Map{
				AdditionalProperties: &schema.String{},
			},
		},
		Required: []string{"ref"},
	})
}

// ReferenceInterpreter is the Conflow interpreter for the Reference block
type ReferenceInterpreter struct {
}

func (i ReferenceInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/src/schema.Reference")
	return s
}

// Create creates a new Reference block
func (i ReferenceInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := &schema.Reference{}
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i ReferenceInterpreter) ValueParamName() conflow.ID {
	return "ref"
}

// ParseContext returns with the parse context for the block
func (i ReferenceInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *schema.Reference
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i ReferenceInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "id":
		return b.(*schema.Reference).ID
	case "ref":
		return b.(*schema.Reference).Ref
	case "deprecated":
		return b.(*schema.Reference).Deprecated
	case "description":
		return b.(*schema.Reference).Description
	case "examples":
		return b.(*schema.Reference).Examples
	case "nullable":
		return b.(*schema.Reference).Nullable
	case "read_only":
		return b.(*schema.Reference).ReadOnly
	case "title":
		return b.(*schema.Reference).Title
	case "write_only":
		return b.(*schema.Reference).WriteOnly
	case "annotations":
		return b.(*schema.Reference).Annotations
	default:
		panic(fmt.Errorf("unexpected parameter %q in Reference", name))
	}
}

func (i ReferenceInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*schema.Reference)
	switch name {
	case "id":
		b.ID = value.(string)
	case "ref":
		b.Ref = value.(string)
	case "deprecated":
		b.Deprecated = value.(bool)
	case "description":
		b.Description = value.(string)
	case "examples":
		b.Examples = value.([]interface{})
	case "nullable":
		b.Nullable = value.(bool)
	case "read_only":
		b.ReadOnly = value.(bool)
	case "title":
		b.Title = value.(string)
	case "write_only":
		b.WriteOnly = value.(bool)
	case "annotations":
		b.Annotations = make(map[string]string, len(value.(map[string]interface{})))
		for valuek, valuev := range value.(map[string]interface{}) {
			b.Annotations[valuek] = valuev.(string)
		}
	}
	return nil
}

func (i ReferenceInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	return nil
}
