// Code generated by Conflow. DO NOT EDIT.

package openapi

import (
	"fmt"
	"github.com/conflowio/conflow/src/conflow"
	"github.com/conflowio/conflow/src/conflow/annotations"
	"github.com/conflowio/conflow/src/schema"
)

func init() {
	schema.Register(&schema.Object{
		Metadata: schema.Metadata{
			Annotations: map[string]string{
				annotations.Type: "main",
			},
			ID: "github.com/conflowio/conflow/src/openapi.OpenAPI",
		},
		FieldNames:     map[string]string{"info": "Info", "openapi": "OpenAPI", "paths": "Paths", "servers": "Servers", "tags": "Tags"},
		ParameterNames: map[string]string{"Parameters": "parameter", "RequestBodies": "request_body", "Responses": "response", "Schemas": "schema", "paths": "path", "servers": "server"},
		Properties: map[string]schema.Schema{
			"Parameters": &schema.Map{
				AdditionalProperties: &schema.Reference{
					Nullable: true,
					Ref:      "github.com/conflowio/conflow/src/openapi.Parameter",
				},
			},
			"RequestBodies": &schema.Map{
				AdditionalProperties: &schema.Reference{
					Nullable: true,
					Ref:      "github.com/conflowio/conflow/src/openapi.RequestBody",
				},
			},
			"Responses": &schema.Map{
				AdditionalProperties: &schema.Reference{
					Nullable: true,
					Ref:      "github.com/conflowio/conflow/src/openapi.Response",
				},
			},
			"Schemas": &schema.Map{
				AdditionalProperties: &schema.Reference{
					Ref: "github.com/conflowio/conflow/src/schema.Schema",
				},
			},
			"info": &schema.Reference{
				Nullable: true,
				Ref:      "github.com/conflowio/conflow/src/openapi.Info",
			},
			"openapi": &schema.String{},
			"paths": &schema.Map{
				AdditionalProperties: &schema.Reference{
					Nullable: true,
					Ref:      "github.com/conflowio/conflow/src/openapi.PathItem",
				},
			},
			"servers": &schema.Array{
				Items: &schema.Reference{
					Nullable: true,
					Ref:      "github.com/conflowio/conflow/src/openapi.Server",
				},
			},
			"tags": &schema.Array{
				Items: &schema.String{},
			},
		},
		Required: []string{"openapi", "info"},
	})
}

// OpenAPIInterpreter is the Conflow interpreter for the OpenAPI block
type OpenAPIInterpreter struct {
}

func (i OpenAPIInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/src/openapi.OpenAPI")
	return s
}

// Create creates a new OpenAPI block
func (i OpenAPIInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := &OpenAPI{}
	b.Parameters = map[string]*Parameter{}
	b.RequestBodies = map[string]*RequestBody{}
	b.Responses = map[string]*Response{}
	b.Schemas = map[string]schema.Schema{}
	b.Paths = map[string]*PathItem{}
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i OpenAPIInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i OpenAPIInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *OpenAPI
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i OpenAPIInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "openapi":
		return b.(*OpenAPI).OpenAPI
	case "tags":
		return b.(*OpenAPI).Tags
	default:
		panic(fmt.Errorf("unexpected parameter %q in OpenAPI", name))
	}
}

func (i OpenAPIInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*OpenAPI)
	switch name {
	case "openapi":
		b.OpenAPI = value.(string)
	case "tags":
		b.Tags = make([]string, len(value.([]interface{})))
		for valuek, valuev := range value.([]interface{}) {
			b.Tags[valuek] = valuev.(string)
		}
	}
	return nil
}

func (i OpenAPIInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	b := block.(*OpenAPI)
	switch name {
	case "parameter":
		b.Parameters[key] = value.(*Parameter)
	case "request_body":
		b.RequestBodies[key] = value.(*RequestBody)
	case "response":
		b.Responses[key] = value.(*Response)
	case "schema":
		b.Schemas[key] = value.(schema.Schema)
	case "info":
		b.Info = value.(*Info)
	case "path":
		b.Paths[key] = value.(*PathItem)
	case "server":
		b.Servers = append(b.Servers, value.(*Server))
	}
	return nil
}
