// Code generated by Conflow. DO NOT EDIT.

package openapi

import (
	"fmt"
	"github.com/conflowio/conflow/src/conflow"
	"github.com/conflowio/conflow/src/conflow/annotations"
	"github.com/conflowio/conflow/src/schema"
)

func init() {
	schema.Register(&schema.Object{
		Metadata: schema.Metadata{
			Annotations: map[string]string{
				annotations.Type: "configuration",
			},
			ID: "github.com/conflowio/conflow/src/openapi.Parameter",
		},
		FieldNames:        map[string]string{"allowEmptyValue": "AllowEmptyValue", "allowReserved": "AllowReserved", "content": "Content", "deprecated": "Deprecated", "description": "Description", "explode": "Explode", "in": "In", "name": "Name", "required": "Required", "schema": "Schema", "style": "Style"},
		JSONPropertyNames: map[string]string{"allow_empty_value": "allowEmptyValue", "allow_reserved": "allowReserved"},
		ParameterNames:    map[string]string{"allowEmptyValue": "allow_empty_value", "allowReserved": "allow_reserved"},
		Properties: map[string]schema.Schema{
			"allowEmptyValue": &schema.Boolean{},
			"allowReserved":   &schema.Boolean{},
			"content": &schema.Map{
				AdditionalProperties: &schema.Reference{
					Ref: "github.com/conflowio/conflow/src/openapi.MediaType",
				},
			},
			"deprecated":  &schema.Boolean{},
			"description": &schema.String{},
			"explode":     &schema.Boolean{},
			"in": &schema.String{
				Enum: []string{"query", "header", "path", "cookie"},
			},
			"name":     &schema.String{},
			"required": &schema.Boolean{},
			"schema": &schema.Reference{
				Ref: "github.com/conflowio/conflow/src/schema.Schema",
			},
			"style": &schema.String{},
		},
		Required: []string{"name"},
	})
}

// ParameterInterpreter is the Conflow interpreter for the Parameter block
type ParameterInterpreter struct {
}

func (i ParameterInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/src/openapi.Parameter")
	return s
}

// Create creates a new Parameter block
func (i ParameterInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := &Parameter{}
	b.Content = map[string]MediaType{}
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i ParameterInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i ParameterInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *Parameter
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i ParameterInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "allow_empty_value":
		return b.(*Parameter).AllowEmptyValue
	case "allow_reserved":
		return b.(*Parameter).AllowReserved
	case "deprecated":
		return b.(*Parameter).Deprecated
	case "description":
		return b.(*Parameter).Description
	case "explode":
		return b.(*Parameter).Explode
	case "in":
		return b.(*Parameter).In
	case "name":
		return b.(*Parameter).Name
	case "required":
		return b.(*Parameter).Required
	case "style":
		return b.(*Parameter).Style
	default:
		panic(fmt.Errorf("unexpected parameter %q in Parameter", name))
	}
}

func (i ParameterInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*Parameter)
	switch name {
	case "allow_empty_value":
		b.AllowEmptyValue = value.(bool)
	case "allow_reserved":
		b.AllowReserved = value.(bool)
	case "deprecated":
		b.Deprecated = value.(bool)
	case "description":
		b.Description = value.(string)
	case "explode":
		b.Explode = value.(bool)
	case "in":
		b.In = value.(string)
	case "name":
		b.Name = value.(string)
	case "required":
		b.Required = value.(bool)
	case "style":
		b.Style = value.(string)
	}
	return nil
}

func (i ParameterInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	b := block.(*Parameter)
	switch name {
	case "content":
		b.Content[key] = value.(MediaType)
	case "schema":
		b.Schema = value.(schema.Schema)
	}
	return nil
}
