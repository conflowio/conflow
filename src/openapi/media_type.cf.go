// Code generated by Conflow. DO NOT EDIT.

package openapi

import (
	"fmt"
	"github.com/conflowio/conflow/src/conflow"
	"github.com/conflowio/conflow/src/conflow/annotations"
	"github.com/conflowio/conflow/src/schema"
)

func init() {
	schema.Register(&schema.Object{
		Metadata: schema.Metadata{
			Annotations: map[string]string{
				annotations.Type: "configuration",
			},
			ID: "github.com/conflowio/conflow/src/openapi.MediaType",
		},
		FieldNames: map[string]string{"schema": "Schema"},
		Properties: map[string]schema.Schema{
			"schema": &schema.Reference{
				Ref: "github.com/conflowio/conflow/src/schema.Schema",
			},
		},
		Required: []string{"schema"},
	})
}

// MediaTypeInterpreter is the Conflow interpreter for the MediaType block
type MediaTypeInterpreter struct {
}

func (i MediaTypeInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/src/openapi.MediaType")
	return s
}

// Create creates a new MediaType block
func (i MediaTypeInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := &MediaType{}
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i MediaTypeInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i MediaTypeInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *MediaType
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i MediaTypeInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	default:
		panic(fmt.Errorf("unexpected parameter %q in MediaType", name))
	}
}

func (i MediaTypeInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	return nil
}

func (i MediaTypeInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	b := block.(*MediaType)
	switch name {
	case "schema":
		b.Schema = value.(schema.Schema)
	}
	return nil
}
