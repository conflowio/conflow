// Code generated by counterfeiter. DO NOT EDIT.
package schemafakes

import (
	"reflect"
	"sync"

	"github.com/conflowio/conflow/src/conflow/schema"
)

type FakeFormat struct {
	PtrFuncStub        func() string
	ptrFuncMutex       sync.RWMutex
	ptrFuncArgsForCall []struct {
	}
	ptrFuncReturns struct {
		result1 string
	}
	ptrFuncReturnsOnCall map[int]struct {
		result1 string
	}
	StringValueStub        func(interface{}) (string, bool)
	stringValueMutex       sync.RWMutex
	stringValueArgsForCall []struct {
		arg1 interface{}
	}
	stringValueReturns struct {
		result1 string
		result2 bool
	}
	stringValueReturnsOnCall map[int]struct {
		result1 string
		result2 bool
	}
	TypeStub        func() (reflect.Type, bool)
	typeMutex       sync.RWMutex
	typeArgsForCall []struct {
	}
	typeReturns struct {
		result1 reflect.Type
		result2 bool
	}
	typeReturnsOnCall map[int]struct {
		result1 reflect.Type
		result2 bool
	}
	ValidateValueStub        func(string) (interface{}, error)
	validateValueMutex       sync.RWMutex
	validateValueArgsForCall []struct {
		arg1 string
	}
	validateValueReturns struct {
		result1 interface{}
		result2 error
	}
	validateValueReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFormat) PtrFunc() string {
	fake.ptrFuncMutex.Lock()
	ret, specificReturn := fake.ptrFuncReturnsOnCall[len(fake.ptrFuncArgsForCall)]
	fake.ptrFuncArgsForCall = append(fake.ptrFuncArgsForCall, struct {
	}{})
	stub := fake.PtrFuncStub
	fakeReturns := fake.ptrFuncReturns
	fake.recordInvocation("PtrFunc", []interface{}{})
	fake.ptrFuncMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFormat) PtrFuncCallCount() int {
	fake.ptrFuncMutex.RLock()
	defer fake.ptrFuncMutex.RUnlock()
	return len(fake.ptrFuncArgsForCall)
}

func (fake *FakeFormat) PtrFuncCalls(stub func() string) {
	fake.ptrFuncMutex.Lock()
	defer fake.ptrFuncMutex.Unlock()
	fake.PtrFuncStub = stub
}

func (fake *FakeFormat) PtrFuncReturns(result1 string) {
	fake.ptrFuncMutex.Lock()
	defer fake.ptrFuncMutex.Unlock()
	fake.PtrFuncStub = nil
	fake.ptrFuncReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeFormat) PtrFuncReturnsOnCall(i int, result1 string) {
	fake.ptrFuncMutex.Lock()
	defer fake.ptrFuncMutex.Unlock()
	fake.PtrFuncStub = nil
	if fake.ptrFuncReturnsOnCall == nil {
		fake.ptrFuncReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.ptrFuncReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeFormat) StringValue(arg1 interface{}) (string, bool) {
	fake.stringValueMutex.Lock()
	ret, specificReturn := fake.stringValueReturnsOnCall[len(fake.stringValueArgsForCall)]
	fake.stringValueArgsForCall = append(fake.stringValueArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	stub := fake.StringValueStub
	fakeReturns := fake.stringValueReturns
	fake.recordInvocation("StringValue", []interface{}{arg1})
	fake.stringValueMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFormat) StringValueCallCount() int {
	fake.stringValueMutex.RLock()
	defer fake.stringValueMutex.RUnlock()
	return len(fake.stringValueArgsForCall)
}

func (fake *FakeFormat) StringValueCalls(stub func(interface{}) (string, bool)) {
	fake.stringValueMutex.Lock()
	defer fake.stringValueMutex.Unlock()
	fake.StringValueStub = stub
}

func (fake *FakeFormat) StringValueArgsForCall(i int) interface{} {
	fake.stringValueMutex.RLock()
	defer fake.stringValueMutex.RUnlock()
	argsForCall := fake.stringValueArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFormat) StringValueReturns(result1 string, result2 bool) {
	fake.stringValueMutex.Lock()
	defer fake.stringValueMutex.Unlock()
	fake.StringValueStub = nil
	fake.stringValueReturns = struct {
		result1 string
		result2 bool
	}{result1, result2}
}

func (fake *FakeFormat) StringValueReturnsOnCall(i int, result1 string, result2 bool) {
	fake.stringValueMutex.Lock()
	defer fake.stringValueMutex.Unlock()
	fake.StringValueStub = nil
	if fake.stringValueReturnsOnCall == nil {
		fake.stringValueReturnsOnCall = make(map[int]struct {
			result1 string
			result2 bool
		})
	}
	fake.stringValueReturnsOnCall[i] = struct {
		result1 string
		result2 bool
	}{result1, result2}
}

func (fake *FakeFormat) Type() (reflect.Type, bool) {
	fake.typeMutex.Lock()
	ret, specificReturn := fake.typeReturnsOnCall[len(fake.typeArgsForCall)]
	fake.typeArgsForCall = append(fake.typeArgsForCall, struct {
	}{})
	stub := fake.TypeStub
	fakeReturns := fake.typeReturns
	fake.recordInvocation("Type", []interface{}{})
	fake.typeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFormat) TypeCallCount() int {
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	return len(fake.typeArgsForCall)
}

func (fake *FakeFormat) TypeCalls(stub func() (reflect.Type, bool)) {
	fake.typeMutex.Lock()
	defer fake.typeMutex.Unlock()
	fake.TypeStub = stub
}

func (fake *FakeFormat) TypeReturns(result1 reflect.Type, result2 bool) {
	fake.typeMutex.Lock()
	defer fake.typeMutex.Unlock()
	fake.TypeStub = nil
	fake.typeReturns = struct {
		result1 reflect.Type
		result2 bool
	}{result1, result2}
}

func (fake *FakeFormat) TypeReturnsOnCall(i int, result1 reflect.Type, result2 bool) {
	fake.typeMutex.Lock()
	defer fake.typeMutex.Unlock()
	fake.TypeStub = nil
	if fake.typeReturnsOnCall == nil {
		fake.typeReturnsOnCall = make(map[int]struct {
			result1 reflect.Type
			result2 bool
		})
	}
	fake.typeReturnsOnCall[i] = struct {
		result1 reflect.Type
		result2 bool
	}{result1, result2}
}

func (fake *FakeFormat) ValidateValue(arg1 string) (interface{}, error) {
	fake.validateValueMutex.Lock()
	ret, specificReturn := fake.validateValueReturnsOnCall[len(fake.validateValueArgsForCall)]
	fake.validateValueArgsForCall = append(fake.validateValueArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ValidateValueStub
	fakeReturns := fake.validateValueReturns
	fake.recordInvocation("ValidateValue", []interface{}{arg1})
	fake.validateValueMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFormat) ValidateValueCallCount() int {
	fake.validateValueMutex.RLock()
	defer fake.validateValueMutex.RUnlock()
	return len(fake.validateValueArgsForCall)
}

func (fake *FakeFormat) ValidateValueCalls(stub func(string) (interface{}, error)) {
	fake.validateValueMutex.Lock()
	defer fake.validateValueMutex.Unlock()
	fake.ValidateValueStub = stub
}

func (fake *FakeFormat) ValidateValueArgsForCall(i int) string {
	fake.validateValueMutex.RLock()
	defer fake.validateValueMutex.RUnlock()
	argsForCall := fake.validateValueArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFormat) ValidateValueReturns(result1 interface{}, result2 error) {
	fake.validateValueMutex.Lock()
	defer fake.validateValueMutex.Unlock()
	fake.ValidateValueStub = nil
	fake.validateValueReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeFormat) ValidateValueReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.validateValueMutex.Lock()
	defer fake.validateValueMutex.Unlock()
	fake.ValidateValueStub = nil
	if fake.validateValueReturnsOnCall == nil {
		fake.validateValueReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.validateValueReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeFormat) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.ptrFuncMutex.RLock()
	defer fake.ptrFuncMutex.RUnlock()
	fake.stringValueMutex.RLock()
	defer fake.stringValueMutex.RUnlock()
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	fake.validateValueMutex.RLock()
	defer fake.validateValueMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFormat) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ schema.Format = new(FakeFormat)
