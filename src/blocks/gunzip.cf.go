// Code generated by Conflow. DO NOT EDIT.

package blocks

import (
	"fmt"
	"github.com/conflowio/conflow/src/conflow"
	"github.com/conflowio/conflow/src/conflow/annotations"
	"github.com/conflowio/conflow/src/schema"
	"io"
)

func init() {
	schema.Register(&schema.Object{
		Metadata: schema.Metadata{
			Annotations: map[string]string{
				annotations.Type: "task",
			},
			ID: "github.com/conflowio/conflow/src/blocks.Gunzip",
		},
		Parameters: map[string]schema.Schema{
			"id": &schema.String{
				Metadata: schema.Metadata{
					Annotations: map[string]string{
						annotations.ID: "true",
					},
					ReadOnly: true,
				},
				Format: "conflow.ID",
			},
			"in": &schema.ByteStream{},
			"out": &schema.Reference{
				Metadata: schema.Metadata{
					Annotations: map[string]string{
						annotations.EvalStage: "init",
						annotations.Generated: "true",
					},
				},
				Nullable: true,
				Ref:      "github.com/conflowio/conflow/src/blocks.Stream",
			},
		},
		Required: []string{"in", "out"},
	})
}

// GunzipInterpreter is the Conflow interpreter for the Gunzip block
type GunzipInterpreter struct {
}

func (i GunzipInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/src/blocks.Gunzip")
	return s
}

// Create creates a new Gunzip block
func (i GunzipInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := &Gunzip{}
	b.id = id
	b.blockPublisher = blockCtx.BlockPublisher()
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i GunzipInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i GunzipInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *Gunzip
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i GunzipInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "id":
		return b.(*Gunzip).id
	case "in":
		return b.(*Gunzip).in
	default:
		panic(fmt.Errorf("unexpected parameter %q in Gunzip", name))
	}
}

func (i GunzipInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*Gunzip)
	switch name {
	case "in":
		b.in = value.(io.ReadCloser)
	}
	return nil
}

func (i GunzipInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	b := block.(*Gunzip)
	switch name {
	case "out":
		b.out = value.(*Stream)
	}
	return nil
}
