// Code generated by Basil. DO NOT EDIT.

package blocks

import (
	"fmt"

	"github.com/opsidian/conflow/basil"
	"github.com/opsidian/conflow/basil/schema"
)

// FailInterpreter is the basil interpreter for the Fail block
type FailInterpreter struct {
	s schema.Schema
}

func (i FailInterpreter) Schema() schema.Schema {
	if i.s == nil {
		i.s = &schema.Object{
			Name: "Fail",
			Properties: map[string]schema.Schema{
				"id": &schema.String{
					Metadata: schema.Metadata{
						Annotations: map[string]string{"id": "true"},
						ReadOnly:    true,
					},
					Format: "basil.ID",
				},
				"msg": &schema.String{
					Metadata: schema.Metadata{
						Annotations: map[string]string{"value": "true"},
					},
				},
			},
			Required: []string{"msg"},
		}
	}
	return i.s
}

// Create creates a new Fail block
func (i FailInterpreter) CreateBlock(id basil.ID, blockCtx *basil.BlockContext) basil.Block {
	return &Fail{
		id: id,
	}
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i FailInterpreter) ValueParamName() basil.ID {
	return "msg"
}

// ParseContext returns with the parse context for the block
func (i FailInterpreter) ParseContext(ctx *basil.ParseContext) *basil.ParseContext {
	var nilBlock *Fail
	if b, ok := basil.Block(nilBlock).(basil.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i FailInterpreter) Param(b basil.Block, name basil.ID) interface{} {
	switch name {
	case "id":
		return b.(*Fail).id
	case "msg":
		return b.(*Fail).msg
	default:
		panic(fmt.Errorf("unexpected parameter %q in Fail", name))
	}
}

func (i FailInterpreter) SetParam(block basil.Block, name basil.ID, value interface{}) error {
	b := block.(*Fail)
	switch name {
	case "msg":
		b.msg = value.(string)
	}
	return nil
}

func (i FailInterpreter) SetBlock(block basil.Block, name basil.ID, value interface{}) error {
	return nil
}
