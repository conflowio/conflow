// Code generated by counterfeiter. DO NOT EDIT.
package conflowfakes

import (
	"sync"

	"github.com/opsidian/conflow/conflow"
)

type FakeParameterDirective struct {
	ApplyToParameterConfigStub        func(*conflow.ParameterConfig)
	applyToParameterConfigMutex       sync.RWMutex
	applyToParameterConfigArgsForCall []struct {
		arg1 *conflow.ParameterConfig
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeParameterDirective) ApplyToParameterConfig(arg1 *conflow.ParameterConfig) {
	fake.applyToParameterConfigMutex.Lock()
	fake.applyToParameterConfigArgsForCall = append(fake.applyToParameterConfigArgsForCall, struct {
		arg1 *conflow.ParameterConfig
	}{arg1})
	stub := fake.ApplyToParameterConfigStub
	fake.recordInvocation("ApplyToParameterConfig", []interface{}{arg1})
	fake.applyToParameterConfigMutex.Unlock()
	if stub != nil {
		fake.ApplyToParameterConfigStub(arg1)
	}
}

func (fake *FakeParameterDirective) ApplyToParameterConfigCallCount() int {
	fake.applyToParameterConfigMutex.RLock()
	defer fake.applyToParameterConfigMutex.RUnlock()
	return len(fake.applyToParameterConfigArgsForCall)
}

func (fake *FakeParameterDirective) ApplyToParameterConfigCalls(stub func(*conflow.ParameterConfig)) {
	fake.applyToParameterConfigMutex.Lock()
	defer fake.applyToParameterConfigMutex.Unlock()
	fake.ApplyToParameterConfigStub = stub
}

func (fake *FakeParameterDirective) ApplyToParameterConfigArgsForCall(i int) *conflow.ParameterConfig {
	fake.applyToParameterConfigMutex.RLock()
	defer fake.applyToParameterConfigMutex.RUnlock()
	argsForCall := fake.applyToParameterConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeParameterDirective) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyToParameterConfigMutex.RLock()
	defer fake.applyToParameterConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeParameterDirective) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ conflow.ParameterDirective = new(FakeParameterDirective)
