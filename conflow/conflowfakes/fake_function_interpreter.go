// Code generated by counterfeiter. DO NOT EDIT.
package conflowfakes

import (
	"sync"

	"github.com/opsidian/conflow/conflow"
	"github.com/opsidian/conflow/conflow/schema"
	"github.com/opsidian/parsley/parsley"
)

type FakeFunctionInterpreter struct {
	EvalStub        func(interface{}, conflow.FunctionNode) (interface{}, parsley.Error)
	evalMutex       sync.RWMutex
	evalArgsForCall []struct {
		arg1 interface{}
		arg2 conflow.FunctionNode
	}
	evalReturns struct {
		result1 interface{}
		result2 parsley.Error
	}
	evalReturnsOnCall map[int]struct {
		result1 interface{}
		result2 parsley.Error
	}
	SchemaStub        func() schema.Schema
	schemaMutex       sync.RWMutex
	schemaArgsForCall []struct {
	}
	schemaReturns struct {
		result1 schema.Schema
	}
	schemaReturnsOnCall map[int]struct {
		result1 schema.Schema
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFunctionInterpreter) Eval(arg1 interface{}, arg2 conflow.FunctionNode) (interface{}, parsley.Error) {
	fake.evalMutex.Lock()
	ret, specificReturn := fake.evalReturnsOnCall[len(fake.evalArgsForCall)]
	fake.evalArgsForCall = append(fake.evalArgsForCall, struct {
		arg1 interface{}
		arg2 conflow.FunctionNode
	}{arg1, arg2})
	stub := fake.EvalStub
	fakeReturns := fake.evalReturns
	fake.recordInvocation("Eval", []interface{}{arg1, arg2})
	fake.evalMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFunctionInterpreter) EvalCallCount() int {
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	return len(fake.evalArgsForCall)
}

func (fake *FakeFunctionInterpreter) EvalCalls(stub func(interface{}, conflow.FunctionNode) (interface{}, parsley.Error)) {
	fake.evalMutex.Lock()
	defer fake.evalMutex.Unlock()
	fake.EvalStub = stub
}

func (fake *FakeFunctionInterpreter) EvalArgsForCall(i int) (interface{}, conflow.FunctionNode) {
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	argsForCall := fake.evalArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFunctionInterpreter) EvalReturns(result1 interface{}, result2 parsley.Error) {
	fake.evalMutex.Lock()
	defer fake.evalMutex.Unlock()
	fake.EvalStub = nil
	fake.evalReturns = struct {
		result1 interface{}
		result2 parsley.Error
	}{result1, result2}
}

func (fake *FakeFunctionInterpreter) EvalReturnsOnCall(i int, result1 interface{}, result2 parsley.Error) {
	fake.evalMutex.Lock()
	defer fake.evalMutex.Unlock()
	fake.EvalStub = nil
	if fake.evalReturnsOnCall == nil {
		fake.evalReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 parsley.Error
		})
	}
	fake.evalReturnsOnCall[i] = struct {
		result1 interface{}
		result2 parsley.Error
	}{result1, result2}
}

func (fake *FakeFunctionInterpreter) Schema() schema.Schema {
	fake.schemaMutex.Lock()
	ret, specificReturn := fake.schemaReturnsOnCall[len(fake.schemaArgsForCall)]
	fake.schemaArgsForCall = append(fake.schemaArgsForCall, struct {
	}{})
	stub := fake.SchemaStub
	fakeReturns := fake.schemaReturns
	fake.recordInvocation("Schema", []interface{}{})
	fake.schemaMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFunctionInterpreter) SchemaCallCount() int {
	fake.schemaMutex.RLock()
	defer fake.schemaMutex.RUnlock()
	return len(fake.schemaArgsForCall)
}

func (fake *FakeFunctionInterpreter) SchemaCalls(stub func() schema.Schema) {
	fake.schemaMutex.Lock()
	defer fake.schemaMutex.Unlock()
	fake.SchemaStub = stub
}

func (fake *FakeFunctionInterpreter) SchemaReturns(result1 schema.Schema) {
	fake.schemaMutex.Lock()
	defer fake.schemaMutex.Unlock()
	fake.SchemaStub = nil
	fake.schemaReturns = struct {
		result1 schema.Schema
	}{result1}
}

func (fake *FakeFunctionInterpreter) SchemaReturnsOnCall(i int, result1 schema.Schema) {
	fake.schemaMutex.Lock()
	defer fake.schemaMutex.Unlock()
	fake.SchemaStub = nil
	if fake.schemaReturnsOnCall == nil {
		fake.schemaReturnsOnCall = make(map[int]struct {
			result1 schema.Schema
		})
	}
	fake.schemaReturnsOnCall[i] = struct {
		result1 schema.Schema
	}{result1}
}

func (fake *FakeFunctionInterpreter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	fake.schemaMutex.RLock()
	defer fake.schemaMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFunctionInterpreter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ conflow.FunctionInterpreter = new(FakeFunctionInterpreter)
