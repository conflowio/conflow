// Code generated by counterfeiter. DO NOT EDIT.
package conflowfakes

import (
	"sync"

	"github.com/conflowio/conflow/conflow"
	"github.com/opsidian/parsley/parsley"
)

type FakeNode struct {
	CreateContainerStub        func(*conflow.EvalContext, conflow.RuntimeConfig, conflow.BlockContainer, interface{}, []conflow.WaitGroup, bool) conflow.JobContainer
	createContainerMutex       sync.RWMutex
	createContainerArgsForCall []struct {
		arg1 *conflow.EvalContext
		arg2 conflow.RuntimeConfig
		arg3 conflow.BlockContainer
		arg4 interface{}
		arg5 []conflow.WaitGroup
		arg6 bool
	}
	createContainerReturns struct {
		result1 conflow.JobContainer
	}
	createContainerReturnsOnCall map[int]struct {
		result1 conflow.JobContainer
	}
	DependenciesStub        func() conflow.Dependencies
	dependenciesMutex       sync.RWMutex
	dependenciesArgsForCall []struct {
	}
	dependenciesReturns struct {
		result1 conflow.Dependencies
	}
	dependenciesReturnsOnCall map[int]struct {
		result1 conflow.Dependencies
	}
	DirectivesStub        func() []conflow.BlockNode
	directivesMutex       sync.RWMutex
	directivesArgsForCall []struct {
	}
	directivesReturns struct {
		result1 []conflow.BlockNode
	}
	directivesReturnsOnCall map[int]struct {
		result1 []conflow.BlockNode
	}
	EvalStageStub        func() conflow.EvalStage
	evalStageMutex       sync.RWMutex
	evalStageArgsForCall []struct {
	}
	evalStageReturns struct {
		result1 conflow.EvalStage
	}
	evalStageReturnsOnCall map[int]struct {
		result1 conflow.EvalStage
	}
	GeneratesStub        func() []conflow.ID
	generatesMutex       sync.RWMutex
	generatesArgsForCall []struct {
	}
	generatesReturns struct {
		result1 []conflow.ID
	}
	generatesReturnsOnCall map[int]struct {
		result1 []conflow.ID
	}
	IDStub        func() conflow.ID
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
	}
	iDReturns struct {
		result1 conflow.ID
	}
	iDReturnsOnCall map[int]struct {
		result1 conflow.ID
	}
	PosStub        func() parsley.Pos
	posMutex       sync.RWMutex
	posArgsForCall []struct {
	}
	posReturns struct {
		result1 parsley.Pos
	}
	posReturnsOnCall map[int]struct {
		result1 parsley.Pos
	}
	ProvidesStub        func() []conflow.ID
	providesMutex       sync.RWMutex
	providesArgsForCall []struct {
	}
	providesReturns struct {
		result1 []conflow.ID
	}
	providesReturnsOnCall map[int]struct {
		result1 []conflow.ID
	}
	ReaderPosStub        func() parsley.Pos
	readerPosMutex       sync.RWMutex
	readerPosArgsForCall []struct {
	}
	readerPosReturns struct {
		result1 parsley.Pos
	}
	readerPosReturnsOnCall map[int]struct {
		result1 parsley.Pos
	}
	SchemaStub        func() interface{}
	schemaMutex       sync.RWMutex
	schemaArgsForCall []struct {
	}
	schemaReturns struct {
		result1 interface{}
	}
	schemaReturnsOnCall map[int]struct {
		result1 interface{}
	}
	TokenStub        func() string
	tokenMutex       sync.RWMutex
	tokenArgsForCall []struct {
	}
	tokenReturns struct {
		result1 string
	}
	tokenReturnsOnCall map[int]struct {
		result1 string
	}
	ValueStub        func(interface{}) (interface{}, parsley.Error)
	valueMutex       sync.RWMutex
	valueArgsForCall []struct {
		arg1 interface{}
	}
	valueReturns struct {
		result1 interface{}
		result2 parsley.Error
	}
	valueReturnsOnCall map[int]struct {
		result1 interface{}
		result2 parsley.Error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNode) CreateContainer(arg1 *conflow.EvalContext, arg2 conflow.RuntimeConfig, arg3 conflow.BlockContainer, arg4 interface{}, arg5 []conflow.WaitGroup, arg6 bool) conflow.JobContainer {
	var arg5Copy []conflow.WaitGroup
	if arg5 != nil {
		arg5Copy = make([]conflow.WaitGroup, len(arg5))
		copy(arg5Copy, arg5)
	}
	fake.createContainerMutex.Lock()
	ret, specificReturn := fake.createContainerReturnsOnCall[len(fake.createContainerArgsForCall)]
	fake.createContainerArgsForCall = append(fake.createContainerArgsForCall, struct {
		arg1 *conflow.EvalContext
		arg2 conflow.RuntimeConfig
		arg3 conflow.BlockContainer
		arg4 interface{}
		arg5 []conflow.WaitGroup
		arg6 bool
	}{arg1, arg2, arg3, arg4, arg5Copy, arg6})
	stub := fake.CreateContainerStub
	fakeReturns := fake.createContainerReturns
	fake.recordInvocation("CreateContainer", []interface{}{arg1, arg2, arg3, arg4, arg5Copy, arg6})
	fake.createContainerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNode) CreateContainerCallCount() int {
	fake.createContainerMutex.RLock()
	defer fake.createContainerMutex.RUnlock()
	return len(fake.createContainerArgsForCall)
}

func (fake *FakeNode) CreateContainerCalls(stub func(*conflow.EvalContext, conflow.RuntimeConfig, conflow.BlockContainer, interface{}, []conflow.WaitGroup, bool) conflow.JobContainer) {
	fake.createContainerMutex.Lock()
	defer fake.createContainerMutex.Unlock()
	fake.CreateContainerStub = stub
}

func (fake *FakeNode) CreateContainerArgsForCall(i int) (*conflow.EvalContext, conflow.RuntimeConfig, conflow.BlockContainer, interface{}, []conflow.WaitGroup, bool) {
	fake.createContainerMutex.RLock()
	defer fake.createContainerMutex.RUnlock()
	argsForCall := fake.createContainerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeNode) CreateContainerReturns(result1 conflow.JobContainer) {
	fake.createContainerMutex.Lock()
	defer fake.createContainerMutex.Unlock()
	fake.CreateContainerStub = nil
	fake.createContainerReturns = struct {
		result1 conflow.JobContainer
	}{result1}
}

func (fake *FakeNode) CreateContainerReturnsOnCall(i int, result1 conflow.JobContainer) {
	fake.createContainerMutex.Lock()
	defer fake.createContainerMutex.Unlock()
	fake.CreateContainerStub = nil
	if fake.createContainerReturnsOnCall == nil {
		fake.createContainerReturnsOnCall = make(map[int]struct {
			result1 conflow.JobContainer
		})
	}
	fake.createContainerReturnsOnCall[i] = struct {
		result1 conflow.JobContainer
	}{result1}
}

func (fake *FakeNode) Dependencies() conflow.Dependencies {
	fake.dependenciesMutex.Lock()
	ret, specificReturn := fake.dependenciesReturnsOnCall[len(fake.dependenciesArgsForCall)]
	fake.dependenciesArgsForCall = append(fake.dependenciesArgsForCall, struct {
	}{})
	stub := fake.DependenciesStub
	fakeReturns := fake.dependenciesReturns
	fake.recordInvocation("Dependencies", []interface{}{})
	fake.dependenciesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNode) DependenciesCallCount() int {
	fake.dependenciesMutex.RLock()
	defer fake.dependenciesMutex.RUnlock()
	return len(fake.dependenciesArgsForCall)
}

func (fake *FakeNode) DependenciesCalls(stub func() conflow.Dependencies) {
	fake.dependenciesMutex.Lock()
	defer fake.dependenciesMutex.Unlock()
	fake.DependenciesStub = stub
}

func (fake *FakeNode) DependenciesReturns(result1 conflow.Dependencies) {
	fake.dependenciesMutex.Lock()
	defer fake.dependenciesMutex.Unlock()
	fake.DependenciesStub = nil
	fake.dependenciesReturns = struct {
		result1 conflow.Dependencies
	}{result1}
}

func (fake *FakeNode) DependenciesReturnsOnCall(i int, result1 conflow.Dependencies) {
	fake.dependenciesMutex.Lock()
	defer fake.dependenciesMutex.Unlock()
	fake.DependenciesStub = nil
	if fake.dependenciesReturnsOnCall == nil {
		fake.dependenciesReturnsOnCall = make(map[int]struct {
			result1 conflow.Dependencies
		})
	}
	fake.dependenciesReturnsOnCall[i] = struct {
		result1 conflow.Dependencies
	}{result1}
}

func (fake *FakeNode) Directives() []conflow.BlockNode {
	fake.directivesMutex.Lock()
	ret, specificReturn := fake.directivesReturnsOnCall[len(fake.directivesArgsForCall)]
	fake.directivesArgsForCall = append(fake.directivesArgsForCall, struct {
	}{})
	stub := fake.DirectivesStub
	fakeReturns := fake.directivesReturns
	fake.recordInvocation("Directives", []interface{}{})
	fake.directivesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNode) DirectivesCallCount() int {
	fake.directivesMutex.RLock()
	defer fake.directivesMutex.RUnlock()
	return len(fake.directivesArgsForCall)
}

func (fake *FakeNode) DirectivesCalls(stub func() []conflow.BlockNode) {
	fake.directivesMutex.Lock()
	defer fake.directivesMutex.Unlock()
	fake.DirectivesStub = stub
}

func (fake *FakeNode) DirectivesReturns(result1 []conflow.BlockNode) {
	fake.directivesMutex.Lock()
	defer fake.directivesMutex.Unlock()
	fake.DirectivesStub = nil
	fake.directivesReturns = struct {
		result1 []conflow.BlockNode
	}{result1}
}

func (fake *FakeNode) DirectivesReturnsOnCall(i int, result1 []conflow.BlockNode) {
	fake.directivesMutex.Lock()
	defer fake.directivesMutex.Unlock()
	fake.DirectivesStub = nil
	if fake.directivesReturnsOnCall == nil {
		fake.directivesReturnsOnCall = make(map[int]struct {
			result1 []conflow.BlockNode
		})
	}
	fake.directivesReturnsOnCall[i] = struct {
		result1 []conflow.BlockNode
	}{result1}
}

func (fake *FakeNode) EvalStage() conflow.EvalStage {
	fake.evalStageMutex.Lock()
	ret, specificReturn := fake.evalStageReturnsOnCall[len(fake.evalStageArgsForCall)]
	fake.evalStageArgsForCall = append(fake.evalStageArgsForCall, struct {
	}{})
	stub := fake.EvalStageStub
	fakeReturns := fake.evalStageReturns
	fake.recordInvocation("EvalStage", []interface{}{})
	fake.evalStageMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNode) EvalStageCallCount() int {
	fake.evalStageMutex.RLock()
	defer fake.evalStageMutex.RUnlock()
	return len(fake.evalStageArgsForCall)
}

func (fake *FakeNode) EvalStageCalls(stub func() conflow.EvalStage) {
	fake.evalStageMutex.Lock()
	defer fake.evalStageMutex.Unlock()
	fake.EvalStageStub = stub
}

func (fake *FakeNode) EvalStageReturns(result1 conflow.EvalStage) {
	fake.evalStageMutex.Lock()
	defer fake.evalStageMutex.Unlock()
	fake.EvalStageStub = nil
	fake.evalStageReturns = struct {
		result1 conflow.EvalStage
	}{result1}
}

func (fake *FakeNode) EvalStageReturnsOnCall(i int, result1 conflow.EvalStage) {
	fake.evalStageMutex.Lock()
	defer fake.evalStageMutex.Unlock()
	fake.EvalStageStub = nil
	if fake.evalStageReturnsOnCall == nil {
		fake.evalStageReturnsOnCall = make(map[int]struct {
			result1 conflow.EvalStage
		})
	}
	fake.evalStageReturnsOnCall[i] = struct {
		result1 conflow.EvalStage
	}{result1}
}

func (fake *FakeNode) Generates() []conflow.ID {
	fake.generatesMutex.Lock()
	ret, specificReturn := fake.generatesReturnsOnCall[len(fake.generatesArgsForCall)]
	fake.generatesArgsForCall = append(fake.generatesArgsForCall, struct {
	}{})
	stub := fake.GeneratesStub
	fakeReturns := fake.generatesReturns
	fake.recordInvocation("Generates", []interface{}{})
	fake.generatesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNode) GeneratesCallCount() int {
	fake.generatesMutex.RLock()
	defer fake.generatesMutex.RUnlock()
	return len(fake.generatesArgsForCall)
}

func (fake *FakeNode) GeneratesCalls(stub func() []conflow.ID) {
	fake.generatesMutex.Lock()
	defer fake.generatesMutex.Unlock()
	fake.GeneratesStub = stub
}

func (fake *FakeNode) GeneratesReturns(result1 []conflow.ID) {
	fake.generatesMutex.Lock()
	defer fake.generatesMutex.Unlock()
	fake.GeneratesStub = nil
	fake.generatesReturns = struct {
		result1 []conflow.ID
	}{result1}
}

func (fake *FakeNode) GeneratesReturnsOnCall(i int, result1 []conflow.ID) {
	fake.generatesMutex.Lock()
	defer fake.generatesMutex.Unlock()
	fake.GeneratesStub = nil
	if fake.generatesReturnsOnCall == nil {
		fake.generatesReturnsOnCall = make(map[int]struct {
			result1 []conflow.ID
		})
	}
	fake.generatesReturnsOnCall[i] = struct {
		result1 []conflow.ID
	}{result1}
}

func (fake *FakeNode) ID() conflow.ID {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
	}{})
	stub := fake.IDStub
	fakeReturns := fake.iDReturns
	fake.recordInvocation("ID", []interface{}{})
	fake.iDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNode) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeNode) IDCalls(stub func() conflow.ID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = stub
}

func (fake *FakeNode) IDReturns(result1 conflow.ID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 conflow.ID
	}{result1}
}

func (fake *FakeNode) IDReturnsOnCall(i int, result1 conflow.ID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 conflow.ID
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 conflow.ID
	}{result1}
}

func (fake *FakeNode) Pos() parsley.Pos {
	fake.posMutex.Lock()
	ret, specificReturn := fake.posReturnsOnCall[len(fake.posArgsForCall)]
	fake.posArgsForCall = append(fake.posArgsForCall, struct {
	}{})
	stub := fake.PosStub
	fakeReturns := fake.posReturns
	fake.recordInvocation("Pos", []interface{}{})
	fake.posMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNode) PosCallCount() int {
	fake.posMutex.RLock()
	defer fake.posMutex.RUnlock()
	return len(fake.posArgsForCall)
}

func (fake *FakeNode) PosCalls(stub func() parsley.Pos) {
	fake.posMutex.Lock()
	defer fake.posMutex.Unlock()
	fake.PosStub = stub
}

func (fake *FakeNode) PosReturns(result1 parsley.Pos) {
	fake.posMutex.Lock()
	defer fake.posMutex.Unlock()
	fake.PosStub = nil
	fake.posReturns = struct {
		result1 parsley.Pos
	}{result1}
}

func (fake *FakeNode) PosReturnsOnCall(i int, result1 parsley.Pos) {
	fake.posMutex.Lock()
	defer fake.posMutex.Unlock()
	fake.PosStub = nil
	if fake.posReturnsOnCall == nil {
		fake.posReturnsOnCall = make(map[int]struct {
			result1 parsley.Pos
		})
	}
	fake.posReturnsOnCall[i] = struct {
		result1 parsley.Pos
	}{result1}
}

func (fake *FakeNode) Provides() []conflow.ID {
	fake.providesMutex.Lock()
	ret, specificReturn := fake.providesReturnsOnCall[len(fake.providesArgsForCall)]
	fake.providesArgsForCall = append(fake.providesArgsForCall, struct {
	}{})
	stub := fake.ProvidesStub
	fakeReturns := fake.providesReturns
	fake.recordInvocation("Provides", []interface{}{})
	fake.providesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNode) ProvidesCallCount() int {
	fake.providesMutex.RLock()
	defer fake.providesMutex.RUnlock()
	return len(fake.providesArgsForCall)
}

func (fake *FakeNode) ProvidesCalls(stub func() []conflow.ID) {
	fake.providesMutex.Lock()
	defer fake.providesMutex.Unlock()
	fake.ProvidesStub = stub
}

func (fake *FakeNode) ProvidesReturns(result1 []conflow.ID) {
	fake.providesMutex.Lock()
	defer fake.providesMutex.Unlock()
	fake.ProvidesStub = nil
	fake.providesReturns = struct {
		result1 []conflow.ID
	}{result1}
}

func (fake *FakeNode) ProvidesReturnsOnCall(i int, result1 []conflow.ID) {
	fake.providesMutex.Lock()
	defer fake.providesMutex.Unlock()
	fake.ProvidesStub = nil
	if fake.providesReturnsOnCall == nil {
		fake.providesReturnsOnCall = make(map[int]struct {
			result1 []conflow.ID
		})
	}
	fake.providesReturnsOnCall[i] = struct {
		result1 []conflow.ID
	}{result1}
}

func (fake *FakeNode) ReaderPos() parsley.Pos {
	fake.readerPosMutex.Lock()
	ret, specificReturn := fake.readerPosReturnsOnCall[len(fake.readerPosArgsForCall)]
	fake.readerPosArgsForCall = append(fake.readerPosArgsForCall, struct {
	}{})
	stub := fake.ReaderPosStub
	fakeReturns := fake.readerPosReturns
	fake.recordInvocation("ReaderPos", []interface{}{})
	fake.readerPosMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNode) ReaderPosCallCount() int {
	fake.readerPosMutex.RLock()
	defer fake.readerPosMutex.RUnlock()
	return len(fake.readerPosArgsForCall)
}

func (fake *FakeNode) ReaderPosCalls(stub func() parsley.Pos) {
	fake.readerPosMutex.Lock()
	defer fake.readerPosMutex.Unlock()
	fake.ReaderPosStub = stub
}

func (fake *FakeNode) ReaderPosReturns(result1 parsley.Pos) {
	fake.readerPosMutex.Lock()
	defer fake.readerPosMutex.Unlock()
	fake.ReaderPosStub = nil
	fake.readerPosReturns = struct {
		result1 parsley.Pos
	}{result1}
}

func (fake *FakeNode) ReaderPosReturnsOnCall(i int, result1 parsley.Pos) {
	fake.readerPosMutex.Lock()
	defer fake.readerPosMutex.Unlock()
	fake.ReaderPosStub = nil
	if fake.readerPosReturnsOnCall == nil {
		fake.readerPosReturnsOnCall = make(map[int]struct {
			result1 parsley.Pos
		})
	}
	fake.readerPosReturnsOnCall[i] = struct {
		result1 parsley.Pos
	}{result1}
}

func (fake *FakeNode) Schema() interface{} {
	fake.schemaMutex.Lock()
	ret, specificReturn := fake.schemaReturnsOnCall[len(fake.schemaArgsForCall)]
	fake.schemaArgsForCall = append(fake.schemaArgsForCall, struct {
	}{})
	stub := fake.SchemaStub
	fakeReturns := fake.schemaReturns
	fake.recordInvocation("Schema", []interface{}{})
	fake.schemaMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNode) SchemaCallCount() int {
	fake.schemaMutex.RLock()
	defer fake.schemaMutex.RUnlock()
	return len(fake.schemaArgsForCall)
}

func (fake *FakeNode) SchemaCalls(stub func() interface{}) {
	fake.schemaMutex.Lock()
	defer fake.schemaMutex.Unlock()
	fake.SchemaStub = stub
}

func (fake *FakeNode) SchemaReturns(result1 interface{}) {
	fake.schemaMutex.Lock()
	defer fake.schemaMutex.Unlock()
	fake.SchemaStub = nil
	fake.schemaReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeNode) SchemaReturnsOnCall(i int, result1 interface{}) {
	fake.schemaMutex.Lock()
	defer fake.schemaMutex.Unlock()
	fake.SchemaStub = nil
	if fake.schemaReturnsOnCall == nil {
		fake.schemaReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.schemaReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeNode) Token() string {
	fake.tokenMutex.Lock()
	ret, specificReturn := fake.tokenReturnsOnCall[len(fake.tokenArgsForCall)]
	fake.tokenArgsForCall = append(fake.tokenArgsForCall, struct {
	}{})
	stub := fake.TokenStub
	fakeReturns := fake.tokenReturns
	fake.recordInvocation("Token", []interface{}{})
	fake.tokenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNode) TokenCallCount() int {
	fake.tokenMutex.RLock()
	defer fake.tokenMutex.RUnlock()
	return len(fake.tokenArgsForCall)
}

func (fake *FakeNode) TokenCalls(stub func() string) {
	fake.tokenMutex.Lock()
	defer fake.tokenMutex.Unlock()
	fake.TokenStub = stub
}

func (fake *FakeNode) TokenReturns(result1 string) {
	fake.tokenMutex.Lock()
	defer fake.tokenMutex.Unlock()
	fake.TokenStub = nil
	fake.tokenReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeNode) TokenReturnsOnCall(i int, result1 string) {
	fake.tokenMutex.Lock()
	defer fake.tokenMutex.Unlock()
	fake.TokenStub = nil
	if fake.tokenReturnsOnCall == nil {
		fake.tokenReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.tokenReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeNode) Value(arg1 interface{}) (interface{}, parsley.Error) {
	fake.valueMutex.Lock()
	ret, specificReturn := fake.valueReturnsOnCall[len(fake.valueArgsForCall)]
	fake.valueArgsForCall = append(fake.valueArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	stub := fake.ValueStub
	fakeReturns := fake.valueReturns
	fake.recordInvocation("Value", []interface{}{arg1})
	fake.valueMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNode) ValueCallCount() int {
	fake.valueMutex.RLock()
	defer fake.valueMutex.RUnlock()
	return len(fake.valueArgsForCall)
}

func (fake *FakeNode) ValueCalls(stub func(interface{}) (interface{}, parsley.Error)) {
	fake.valueMutex.Lock()
	defer fake.valueMutex.Unlock()
	fake.ValueStub = stub
}

func (fake *FakeNode) ValueArgsForCall(i int) interface{} {
	fake.valueMutex.RLock()
	defer fake.valueMutex.RUnlock()
	argsForCall := fake.valueArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNode) ValueReturns(result1 interface{}, result2 parsley.Error) {
	fake.valueMutex.Lock()
	defer fake.valueMutex.Unlock()
	fake.ValueStub = nil
	fake.valueReturns = struct {
		result1 interface{}
		result2 parsley.Error
	}{result1, result2}
}

func (fake *FakeNode) ValueReturnsOnCall(i int, result1 interface{}, result2 parsley.Error) {
	fake.valueMutex.Lock()
	defer fake.valueMutex.Unlock()
	fake.ValueStub = nil
	if fake.valueReturnsOnCall == nil {
		fake.valueReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 parsley.Error
		})
	}
	fake.valueReturnsOnCall[i] = struct {
		result1 interface{}
		result2 parsley.Error
	}{result1, result2}
}

func (fake *FakeNode) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createContainerMutex.RLock()
	defer fake.createContainerMutex.RUnlock()
	fake.dependenciesMutex.RLock()
	defer fake.dependenciesMutex.RUnlock()
	fake.directivesMutex.RLock()
	defer fake.directivesMutex.RUnlock()
	fake.evalStageMutex.RLock()
	defer fake.evalStageMutex.RUnlock()
	fake.generatesMutex.RLock()
	defer fake.generatesMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.posMutex.RLock()
	defer fake.posMutex.RUnlock()
	fake.providesMutex.RLock()
	defer fake.providesMutex.RUnlock()
	fake.readerPosMutex.RLock()
	defer fake.readerPosMutex.RUnlock()
	fake.schemaMutex.RLock()
	defer fake.schemaMutex.RUnlock()
	fake.tokenMutex.RLock()
	defer fake.tokenMutex.RUnlock()
	fake.valueMutex.RLock()
	defer fake.valueMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNode) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ conflow.Node = new(FakeNode)
