// Code generated by Basil. DO NOT EDIT.
package fixtures

import (
	"fmt"

	"github.com/opsidian/basil/basil"
	"github.com/opsidian/basil/basil/block"
	"github.com/opsidian/basil/basil/variable"
	"github.com/opsidian/parsley/parsley"
)

type BlockSimpleInterpreter struct{}

// Create creates a new BlockSimple block
func (i BlockSimpleInterpreter) Create(ctx *basil.EvalContext, node basil.BlockNode) basil.Block {
	return &BlockSimple{
		IDField: node.ID(),
	}
}

// Params returns with the list of valid parameters
func (i BlockSimpleInterpreter) Params() map[basil.ID]block.ParameterDescriptor {
	return map[basil.ID]block.ParameterDescriptor{
		"value": {Type: "interface{}", IsRequired: false, IsOutput: false},
	}
}

// HasForeignID returns true if the block ID is referencing an other block id
func (i BlockSimpleInterpreter) HasForeignID() bool {
	return false
}

// HasShortFormat returns true if the block can be defined in the short block format
func (i BlockSimpleInterpreter) ValueParamName() basil.ID {
	return "value"
}

// ParseContext returns with the parse context for the block
func (i BlockSimpleInterpreter) ParseContext(parentCtx *basil.ParseContext) *basil.ParseContext {
	var nilBlock *BlockSimple
	if b, ok := basil.Block(nilBlock).(basil.ParseContextAware); ok {
		return b.ParseContext(parentCtx)
	}

	return parentCtx
}

func (i BlockSimpleInterpreter) Param(b basil.Block, name basil.ID) interface{} {
	switch name {
	case "id":
		return b.(*BlockSimple).IDField
	case "value":
		return b.(*BlockSimple).Value
	default:
		panic(fmt.Errorf("unexpected parameter %q in BlockSimple", name))
	}
}

func (i BlockSimpleInterpreter) SetParam(ctx *basil.EvalContext, b basil.Block, name basil.ID, node basil.BlockParamNode) parsley.Error {
	switch name {
	case "value":
		var err parsley.Error
		b.(*BlockSimple).Value, err = variable.NodeAnyValue(node, ctx)
		return err
	}
	return nil
}

func (i BlockSimpleInterpreter) SetBlock(ctx *basil.EvalContext, b basil.Block, name basil.ID, value interface{}) parsley.Error {
	return nil
}
