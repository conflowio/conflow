// Code generated by Basil. DO NOT EDIT.
package fixtures

import (
	"fmt"

	"github.com/opsidian/basil/basil"
	"github.com/opsidian/basil/basil/variable"
)

type BlockWithContextInterpreter struct{}

// Create creates a new BlockWithContext block
func (i BlockWithContextInterpreter) CreateBlock(id basil.ID) basil.Block {
	return &BlockWithContext{
		IDField: id,
	}
}

// Params returns with the list of valid parameters
func (i BlockWithContextInterpreter) Params() map[basil.ID]basil.ParameterDescriptor {
	return nil
}

// Blocks returns with the list of valid blocks
func (i BlockWithContextInterpreter) Blocks() map[basil.ID]basil.BlockDescriptor {
	return nil
}

// HasForeignID returns true if the block ID is referencing an other block id
func (i BlockWithContextInterpreter) HasForeignID() bool {
	return false
}

// HasShortFormat returns true if the block can be defined in the short block format
func (i BlockWithContextInterpreter) ValueParamName() basil.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i BlockWithContextInterpreter) ParseContext(ctx *basil.ParseContext) *basil.ParseContext {
	var nilBlock *BlockWithContext
	if b, ok := basil.Block(nilBlock).(basil.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i BlockWithContextInterpreter) Param(b basil.Block, name basil.ID) interface{} {
	switch name {
	case "id":
		return b.(*BlockWithContext).IDField
	default:
		panic(fmt.Errorf("unexpected parameter %q in BlockWithContext", name))
	}
}

func (i BlockWithContextInterpreter) SetParam(block basil.Block, name basil.ID, value interface{}) error {
	var err error
	b := block.(*BlockWithContext)
	switch name {
	case "id":
		b.IDField, err = variable.IdentifierValue(value)
	}
	return err
}

func (i BlockWithContextInterpreter) SetBlock(block basil.Block, name basil.ID, value interface{}) error {
	return nil
}

func (i BlockWithContextInterpreter) ProcessChannels(blockContainer basil.BlockContainer) {
}

func (i BlockWithContextInterpreter) CloseChannels(blockContainer basil.BlockContainer) {
}
