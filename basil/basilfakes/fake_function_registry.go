// Code generated by counterfeiter. DO NOT EDIT.
package basilfakes

import (
	"sync"

	"github.com/opsidian/basil/basil"
	"github.com/opsidian/parsley/parsley"
)

type FakeFunctionRegistry struct {
	CallFunctionStub        func(ctx interface{}, function parsley.Node, params []parsley.Node) (interface{}, parsley.Error)
	callFunctionMutex       sync.RWMutex
	callFunctionArgsForCall []struct {
		ctx      interface{}
		function parsley.Node
		params   []parsley.Node
	}
	callFunctionReturns struct {
		result1 interface{}
		result2 parsley.Error
	}
	callFunctionReturnsOnCall map[int]struct {
		result1 interface{}
		result2 parsley.Error
	}
	FunctionExistsStub        func(name basil.ID) bool
	functionExistsMutex       sync.RWMutex
	functionExistsArgsForCall []struct {
		name basil.ID
	}
	functionExistsReturns struct {
		result1 bool
	}
	functionExistsReturnsOnCall map[int]struct {
		result1 bool
	}
	RegisterFunctionStub        func(name basil.ID, callable basil.Callable)
	registerFunctionMutex       sync.RWMutex
	registerFunctionArgsForCall []struct {
		name     basil.ID
		callable basil.Callable
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFunctionRegistry) CallFunction(ctx interface{}, function parsley.Node, params []parsley.Node) (interface{}, parsley.Error) {
	var paramsCopy []parsley.Node
	if params != nil {
		paramsCopy = make([]parsley.Node, len(params))
		copy(paramsCopy, params)
	}
	fake.callFunctionMutex.Lock()
	ret, specificReturn := fake.callFunctionReturnsOnCall[len(fake.callFunctionArgsForCall)]
	fake.callFunctionArgsForCall = append(fake.callFunctionArgsForCall, struct {
		ctx      interface{}
		function parsley.Node
		params   []parsley.Node
	}{ctx, function, paramsCopy})
	fake.recordInvocation("CallFunction", []interface{}{ctx, function, paramsCopy})
	fake.callFunctionMutex.Unlock()
	if fake.CallFunctionStub != nil {
		return fake.CallFunctionStub(ctx, function, params)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.callFunctionReturns.result1, fake.callFunctionReturns.result2
}

func (fake *FakeFunctionRegistry) CallFunctionCallCount() int {
	fake.callFunctionMutex.RLock()
	defer fake.callFunctionMutex.RUnlock()
	return len(fake.callFunctionArgsForCall)
}

func (fake *FakeFunctionRegistry) CallFunctionArgsForCall(i int) (interface{}, parsley.Node, []parsley.Node) {
	fake.callFunctionMutex.RLock()
	defer fake.callFunctionMutex.RUnlock()
	return fake.callFunctionArgsForCall[i].ctx, fake.callFunctionArgsForCall[i].function, fake.callFunctionArgsForCall[i].params
}

func (fake *FakeFunctionRegistry) CallFunctionReturns(result1 interface{}, result2 parsley.Error) {
	fake.CallFunctionStub = nil
	fake.callFunctionReturns = struct {
		result1 interface{}
		result2 parsley.Error
	}{result1, result2}
}

func (fake *FakeFunctionRegistry) CallFunctionReturnsOnCall(i int, result1 interface{}, result2 parsley.Error) {
	fake.CallFunctionStub = nil
	if fake.callFunctionReturnsOnCall == nil {
		fake.callFunctionReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 parsley.Error
		})
	}
	fake.callFunctionReturnsOnCall[i] = struct {
		result1 interface{}
		result2 parsley.Error
	}{result1, result2}
}

func (fake *FakeFunctionRegistry) FunctionExists(name basil.ID) bool {
	fake.functionExistsMutex.Lock()
	ret, specificReturn := fake.functionExistsReturnsOnCall[len(fake.functionExistsArgsForCall)]
	fake.functionExistsArgsForCall = append(fake.functionExistsArgsForCall, struct {
		name basil.ID
	}{name})
	fake.recordInvocation("FunctionExists", []interface{}{name})
	fake.functionExistsMutex.Unlock()
	if fake.FunctionExistsStub != nil {
		return fake.FunctionExistsStub(name)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.functionExistsReturns.result1
}

func (fake *FakeFunctionRegistry) FunctionExistsCallCount() int {
	fake.functionExistsMutex.RLock()
	defer fake.functionExistsMutex.RUnlock()
	return len(fake.functionExistsArgsForCall)
}

func (fake *FakeFunctionRegistry) FunctionExistsArgsForCall(i int) basil.ID {
	fake.functionExistsMutex.RLock()
	defer fake.functionExistsMutex.RUnlock()
	return fake.functionExistsArgsForCall[i].name
}

func (fake *FakeFunctionRegistry) FunctionExistsReturns(result1 bool) {
	fake.FunctionExistsStub = nil
	fake.functionExistsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFunctionRegistry) FunctionExistsReturnsOnCall(i int, result1 bool) {
	fake.FunctionExistsStub = nil
	if fake.functionExistsReturnsOnCall == nil {
		fake.functionExistsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.functionExistsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFunctionRegistry) RegisterFunction(name basil.ID, callable basil.Callable) {
	fake.registerFunctionMutex.Lock()
	fake.registerFunctionArgsForCall = append(fake.registerFunctionArgsForCall, struct {
		name     basil.ID
		callable basil.Callable
	}{name, callable})
	fake.recordInvocation("RegisterFunction", []interface{}{name, callable})
	fake.registerFunctionMutex.Unlock()
	if fake.RegisterFunctionStub != nil {
		fake.RegisterFunctionStub(name, callable)
	}
}

func (fake *FakeFunctionRegistry) RegisterFunctionCallCount() int {
	fake.registerFunctionMutex.RLock()
	defer fake.registerFunctionMutex.RUnlock()
	return len(fake.registerFunctionArgsForCall)
}

func (fake *FakeFunctionRegistry) RegisterFunctionArgsForCall(i int) (basil.ID, basil.Callable) {
	fake.registerFunctionMutex.RLock()
	defer fake.registerFunctionMutex.RUnlock()
	return fake.registerFunctionArgsForCall[i].name, fake.registerFunctionArgsForCall[i].callable
}

func (fake *FakeFunctionRegistry) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.callFunctionMutex.RLock()
	defer fake.callFunctionMutex.RUnlock()
	fake.functionExistsMutex.RLock()
	defer fake.functionExistsMutex.RUnlock()
	fake.registerFunctionMutex.RLock()
	defer fake.registerFunctionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFunctionRegistry) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ basil.FunctionRegistry = new(FakeFunctionRegistry)
