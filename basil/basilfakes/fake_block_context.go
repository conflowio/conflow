// Code generated by counterfeiter. DO NOT EDIT.
package basilfakes

import (
	"context"
	"sync"

	"github.com/opsidian/basil/basil"
)

type FakeBlockContext struct {
	ContextStub        func() context.Context
	contextMutex       sync.RWMutex
	contextArgsForCall []struct {
	}
	contextReturns struct {
		result1 context.Context
	}
	contextReturnsOnCall map[int]struct {
		result1 context.Context
	}
	UserContextStub        func() interface{}
	userContextMutex       sync.RWMutex
	userContextArgsForCall []struct {
	}
	userContextReturns struct {
		result1 interface{}
	}
	userContextReturnsOnCall map[int]struct {
		result1 interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlockContext) Context() context.Context {
	fake.contextMutex.Lock()
	ret, specificReturn := fake.contextReturnsOnCall[len(fake.contextArgsForCall)]
	fake.contextArgsForCall = append(fake.contextArgsForCall, struct {
	}{})
	fake.recordInvocation("Context", []interface{}{})
	fake.contextMutex.Unlock()
	if fake.ContextStub != nil {
		return fake.ContextStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.contextReturns
	return fakeReturns.result1
}

func (fake *FakeBlockContext) ContextCallCount() int {
	fake.contextMutex.RLock()
	defer fake.contextMutex.RUnlock()
	return len(fake.contextArgsForCall)
}

func (fake *FakeBlockContext) ContextCalls(stub func() context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = stub
}

func (fake *FakeBlockContext) ContextReturns(result1 context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = nil
	fake.contextReturns = struct {
		result1 context.Context
	}{result1}
}

func (fake *FakeBlockContext) ContextReturnsOnCall(i int, result1 context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = nil
	if fake.contextReturnsOnCall == nil {
		fake.contextReturnsOnCall = make(map[int]struct {
			result1 context.Context
		})
	}
	fake.contextReturnsOnCall[i] = struct {
		result1 context.Context
	}{result1}
}

func (fake *FakeBlockContext) UserContext() interface{} {
	fake.userContextMutex.Lock()
	ret, specificReturn := fake.userContextReturnsOnCall[len(fake.userContextArgsForCall)]
	fake.userContextArgsForCall = append(fake.userContextArgsForCall, struct {
	}{})
	fake.recordInvocation("UserContext", []interface{}{})
	fake.userContextMutex.Unlock()
	if fake.UserContextStub != nil {
		return fake.UserContextStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.userContextReturns
	return fakeReturns.result1
}

func (fake *FakeBlockContext) UserContextCallCount() int {
	fake.userContextMutex.RLock()
	defer fake.userContextMutex.RUnlock()
	return len(fake.userContextArgsForCall)
}

func (fake *FakeBlockContext) UserContextCalls(stub func() interface{}) {
	fake.userContextMutex.Lock()
	defer fake.userContextMutex.Unlock()
	fake.UserContextStub = stub
}

func (fake *FakeBlockContext) UserContextReturns(result1 interface{}) {
	fake.userContextMutex.Lock()
	defer fake.userContextMutex.Unlock()
	fake.UserContextStub = nil
	fake.userContextReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeBlockContext) UserContextReturnsOnCall(i int, result1 interface{}) {
	fake.userContextMutex.Lock()
	defer fake.userContextMutex.Unlock()
	fake.UserContextStub = nil
	if fake.userContextReturnsOnCall == nil {
		fake.userContextReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.userContextReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeBlockContext) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.contextMutex.RLock()
	defer fake.contextMutex.RUnlock()
	fake.userContextMutex.RLock()
	defer fake.userContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlockContext) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ basil.BlockContext = new(FakeBlockContext)
