// Code generated by counterfeiter. DO NOT EDIT.
package basilfakes

import (
	"context"
	"sync"

	"github.com/opsidian/basil/basil"
)

type FakeBlockContext struct {
	ContextStub        func() context.Context
	contextMutex       sync.RWMutex
	contextArgsForCall []struct {
	}
	contextReturns struct {
		result1 context.Context
	}
	contextReturnsOnCall map[int]struct {
		result1 context.Context
	}
	LoggerStub        func() basil.Logger
	loggerMutex       sync.RWMutex
	loggerArgsForCall []struct {
	}
	loggerReturns struct {
		result1 basil.Logger
	}
	loggerReturnsOnCall map[int]struct {
		result1 basil.Logger
	}
	PublishBlockStub        func(basil.Block) error
	publishBlockMutex       sync.RWMutex
	publishBlockArgsForCall []struct {
		arg1 basil.Block
	}
	publishBlockReturns struct {
		result1 error
	}
	publishBlockReturnsOnCall map[int]struct {
		result1 error
	}
	UserContextStub        func() interface{}
	userContextMutex       sync.RWMutex
	userContextArgsForCall []struct {
	}
	userContextReturns struct {
		result1 interface{}
	}
	userContextReturnsOnCall map[int]struct {
		result1 interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlockContext) Context() context.Context {
	fake.contextMutex.Lock()
	ret, specificReturn := fake.contextReturnsOnCall[len(fake.contextArgsForCall)]
	fake.contextArgsForCall = append(fake.contextArgsForCall, struct {
	}{})
	fake.recordInvocation("Context", []interface{}{})
	fake.contextMutex.Unlock()
	if fake.ContextStub != nil {
		return fake.ContextStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.contextReturns
	return fakeReturns.result1
}

func (fake *FakeBlockContext) ContextCallCount() int {
	fake.contextMutex.RLock()
	defer fake.contextMutex.RUnlock()
	return len(fake.contextArgsForCall)
}

func (fake *FakeBlockContext) ContextCalls(stub func() context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = stub
}

func (fake *FakeBlockContext) ContextReturns(result1 context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = nil
	fake.contextReturns = struct {
		result1 context.Context
	}{result1}
}

func (fake *FakeBlockContext) ContextReturnsOnCall(i int, result1 context.Context) {
	fake.contextMutex.Lock()
	defer fake.contextMutex.Unlock()
	fake.ContextStub = nil
	if fake.contextReturnsOnCall == nil {
		fake.contextReturnsOnCall = make(map[int]struct {
			result1 context.Context
		})
	}
	fake.contextReturnsOnCall[i] = struct {
		result1 context.Context
	}{result1}
}

func (fake *FakeBlockContext) Logger() basil.Logger {
	fake.loggerMutex.Lock()
	ret, specificReturn := fake.loggerReturnsOnCall[len(fake.loggerArgsForCall)]
	fake.loggerArgsForCall = append(fake.loggerArgsForCall, struct {
	}{})
	fake.recordInvocation("Logger", []interface{}{})
	fake.loggerMutex.Unlock()
	if fake.LoggerStub != nil {
		return fake.LoggerStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.loggerReturns
	return fakeReturns.result1
}

func (fake *FakeBlockContext) LoggerCallCount() int {
	fake.loggerMutex.RLock()
	defer fake.loggerMutex.RUnlock()
	return len(fake.loggerArgsForCall)
}

func (fake *FakeBlockContext) LoggerCalls(stub func() basil.Logger) {
	fake.loggerMutex.Lock()
	defer fake.loggerMutex.Unlock()
	fake.LoggerStub = stub
}

func (fake *FakeBlockContext) LoggerReturns(result1 basil.Logger) {
	fake.loggerMutex.Lock()
	defer fake.loggerMutex.Unlock()
	fake.LoggerStub = nil
	fake.loggerReturns = struct {
		result1 basil.Logger
	}{result1}
}

func (fake *FakeBlockContext) LoggerReturnsOnCall(i int, result1 basil.Logger) {
	fake.loggerMutex.Lock()
	defer fake.loggerMutex.Unlock()
	fake.LoggerStub = nil
	if fake.loggerReturnsOnCall == nil {
		fake.loggerReturnsOnCall = make(map[int]struct {
			result1 basil.Logger
		})
	}
	fake.loggerReturnsOnCall[i] = struct {
		result1 basil.Logger
	}{result1}
}

func (fake *FakeBlockContext) PublishBlock(arg1 basil.Block) error {
	fake.publishBlockMutex.Lock()
	ret, specificReturn := fake.publishBlockReturnsOnCall[len(fake.publishBlockArgsForCall)]
	fake.publishBlockArgsForCall = append(fake.publishBlockArgsForCall, struct {
		arg1 basil.Block
	}{arg1})
	fake.recordInvocation("PublishBlock", []interface{}{arg1})
	fake.publishBlockMutex.Unlock()
	if fake.PublishBlockStub != nil {
		return fake.PublishBlockStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.publishBlockReturns
	return fakeReturns.result1
}

func (fake *FakeBlockContext) PublishBlockCallCount() int {
	fake.publishBlockMutex.RLock()
	defer fake.publishBlockMutex.RUnlock()
	return len(fake.publishBlockArgsForCall)
}

func (fake *FakeBlockContext) PublishBlockCalls(stub func(basil.Block) error) {
	fake.publishBlockMutex.Lock()
	defer fake.publishBlockMutex.Unlock()
	fake.PublishBlockStub = stub
}

func (fake *FakeBlockContext) PublishBlockArgsForCall(i int) basil.Block {
	fake.publishBlockMutex.RLock()
	defer fake.publishBlockMutex.RUnlock()
	argsForCall := fake.publishBlockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBlockContext) PublishBlockReturns(result1 error) {
	fake.publishBlockMutex.Lock()
	defer fake.publishBlockMutex.Unlock()
	fake.PublishBlockStub = nil
	fake.publishBlockReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockContext) PublishBlockReturnsOnCall(i int, result1 error) {
	fake.publishBlockMutex.Lock()
	defer fake.publishBlockMutex.Unlock()
	fake.PublishBlockStub = nil
	if fake.publishBlockReturnsOnCall == nil {
		fake.publishBlockReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.publishBlockReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockContext) UserContext() interface{} {
	fake.userContextMutex.Lock()
	ret, specificReturn := fake.userContextReturnsOnCall[len(fake.userContextArgsForCall)]
	fake.userContextArgsForCall = append(fake.userContextArgsForCall, struct {
	}{})
	fake.recordInvocation("UserContext", []interface{}{})
	fake.userContextMutex.Unlock()
	if fake.UserContextStub != nil {
		return fake.UserContextStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.userContextReturns
	return fakeReturns.result1
}

func (fake *FakeBlockContext) UserContextCallCount() int {
	fake.userContextMutex.RLock()
	defer fake.userContextMutex.RUnlock()
	return len(fake.userContextArgsForCall)
}

func (fake *FakeBlockContext) UserContextCalls(stub func() interface{}) {
	fake.userContextMutex.Lock()
	defer fake.userContextMutex.Unlock()
	fake.UserContextStub = stub
}

func (fake *FakeBlockContext) UserContextReturns(result1 interface{}) {
	fake.userContextMutex.Lock()
	defer fake.userContextMutex.Unlock()
	fake.UserContextStub = nil
	fake.userContextReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeBlockContext) UserContextReturnsOnCall(i int, result1 interface{}) {
	fake.userContextMutex.Lock()
	defer fake.userContextMutex.Unlock()
	fake.UserContextStub = nil
	if fake.userContextReturnsOnCall == nil {
		fake.userContextReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.userContextReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeBlockContext) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.contextMutex.RLock()
	defer fake.contextMutex.RUnlock()
	fake.loggerMutex.RLock()
	defer fake.loggerMutex.RUnlock()
	fake.publishBlockMutex.RLock()
	defer fake.publishBlockMutex.RUnlock()
	fake.userContextMutex.RLock()
	defer fake.userContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlockContext) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ basil.BlockContext = new(FakeBlockContext)
