// Code generated by counterfeiter. DO NOT EDIT.
package basilfakes

import (
	"sync"

	"github.com/opsidian/basil/basil"
	"github.com/opsidian/parsley/parsley"
)

type FakeBlockContainer struct {
	BlockStub        func() basil.Block
	blockMutex       sync.RWMutex
	blockArgsForCall []struct {
	}
	blockReturns struct {
		result1 basil.Block
	}
	blockReturnsOnCall map[int]struct {
		result1 basil.Block
	}
	EvaluateChildNodeStub        func(*basil.EvalContext, basil.Node) parsley.Error
	evaluateChildNodeMutex       sync.RWMutex
	evaluateChildNodeArgsForCall []struct {
		arg1 *basil.EvalContext
		arg2 basil.Node
	}
	evaluateChildNodeReturns struct {
		result1 parsley.Error
	}
	evaluateChildNodeReturnsOnCall map[int]struct {
		result1 parsley.Error
	}
	IDStub        func() basil.ID
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
	}
	iDReturns struct {
		result1 basil.ID
	}
	iDReturnsOnCall map[int]struct {
		result1 basil.ID
	}
	ParamStub        func(basil.ID) interface{}
	paramMutex       sync.RWMutex
	paramArgsForCall []struct {
		arg1 basil.ID
	}
	paramReturns struct {
		result1 interface{}
	}
	paramReturnsOnCall map[int]struct {
		result1 interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlockContainer) Block() basil.Block {
	fake.blockMutex.Lock()
	ret, specificReturn := fake.blockReturnsOnCall[len(fake.blockArgsForCall)]
	fake.blockArgsForCall = append(fake.blockArgsForCall, struct {
	}{})
	fake.recordInvocation("Block", []interface{}{})
	fake.blockMutex.Unlock()
	if fake.BlockStub != nil {
		return fake.BlockStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.blockReturns
	return fakeReturns.result1
}

func (fake *FakeBlockContainer) BlockCallCount() int {
	fake.blockMutex.RLock()
	defer fake.blockMutex.RUnlock()
	return len(fake.blockArgsForCall)
}

func (fake *FakeBlockContainer) BlockCalls(stub func() basil.Block) {
	fake.blockMutex.Lock()
	defer fake.blockMutex.Unlock()
	fake.BlockStub = stub
}

func (fake *FakeBlockContainer) BlockReturns(result1 basil.Block) {
	fake.blockMutex.Lock()
	defer fake.blockMutex.Unlock()
	fake.BlockStub = nil
	fake.blockReturns = struct {
		result1 basil.Block
	}{result1}
}

func (fake *FakeBlockContainer) BlockReturnsOnCall(i int, result1 basil.Block) {
	fake.blockMutex.Lock()
	defer fake.blockMutex.Unlock()
	fake.BlockStub = nil
	if fake.blockReturnsOnCall == nil {
		fake.blockReturnsOnCall = make(map[int]struct {
			result1 basil.Block
		})
	}
	fake.blockReturnsOnCall[i] = struct {
		result1 basil.Block
	}{result1}
}

func (fake *FakeBlockContainer) EvaluateChildNode(arg1 *basil.EvalContext, arg2 basil.Node) parsley.Error {
	fake.evaluateChildNodeMutex.Lock()
	ret, specificReturn := fake.evaluateChildNodeReturnsOnCall[len(fake.evaluateChildNodeArgsForCall)]
	fake.evaluateChildNodeArgsForCall = append(fake.evaluateChildNodeArgsForCall, struct {
		arg1 *basil.EvalContext
		arg2 basil.Node
	}{arg1, arg2})
	fake.recordInvocation("EvaluateChildNode", []interface{}{arg1, arg2})
	fake.evaluateChildNodeMutex.Unlock()
	if fake.EvaluateChildNodeStub != nil {
		return fake.EvaluateChildNodeStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.evaluateChildNodeReturns
	return fakeReturns.result1
}

func (fake *FakeBlockContainer) EvaluateChildNodeCallCount() int {
	fake.evaluateChildNodeMutex.RLock()
	defer fake.evaluateChildNodeMutex.RUnlock()
	return len(fake.evaluateChildNodeArgsForCall)
}

func (fake *FakeBlockContainer) EvaluateChildNodeCalls(stub func(*basil.EvalContext, basil.Node) parsley.Error) {
	fake.evaluateChildNodeMutex.Lock()
	defer fake.evaluateChildNodeMutex.Unlock()
	fake.EvaluateChildNodeStub = stub
}

func (fake *FakeBlockContainer) EvaluateChildNodeArgsForCall(i int) (*basil.EvalContext, basil.Node) {
	fake.evaluateChildNodeMutex.RLock()
	defer fake.evaluateChildNodeMutex.RUnlock()
	argsForCall := fake.evaluateChildNodeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlockContainer) EvaluateChildNodeReturns(result1 parsley.Error) {
	fake.evaluateChildNodeMutex.Lock()
	defer fake.evaluateChildNodeMutex.Unlock()
	fake.EvaluateChildNodeStub = nil
	fake.evaluateChildNodeReturns = struct {
		result1 parsley.Error
	}{result1}
}

func (fake *FakeBlockContainer) EvaluateChildNodeReturnsOnCall(i int, result1 parsley.Error) {
	fake.evaluateChildNodeMutex.Lock()
	defer fake.evaluateChildNodeMutex.Unlock()
	fake.EvaluateChildNodeStub = nil
	if fake.evaluateChildNodeReturnsOnCall == nil {
		fake.evaluateChildNodeReturnsOnCall = make(map[int]struct {
			result1 parsley.Error
		})
	}
	fake.evaluateChildNodeReturnsOnCall[i] = struct {
		result1 parsley.Error
	}{result1}
}

func (fake *FakeBlockContainer) ID() basil.ID {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
	}{})
	fake.recordInvocation("ID", []interface{}{})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.iDReturns
	return fakeReturns.result1
}

func (fake *FakeBlockContainer) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeBlockContainer) IDCalls(stub func() basil.ID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = stub
}

func (fake *FakeBlockContainer) IDReturns(result1 basil.ID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 basil.ID
	}{result1}
}

func (fake *FakeBlockContainer) IDReturnsOnCall(i int, result1 basil.ID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 basil.ID
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 basil.ID
	}{result1}
}

func (fake *FakeBlockContainer) Param(arg1 basil.ID) interface{} {
	fake.paramMutex.Lock()
	ret, specificReturn := fake.paramReturnsOnCall[len(fake.paramArgsForCall)]
	fake.paramArgsForCall = append(fake.paramArgsForCall, struct {
		arg1 basil.ID
	}{arg1})
	fake.recordInvocation("Param", []interface{}{arg1})
	fake.paramMutex.Unlock()
	if fake.ParamStub != nil {
		return fake.ParamStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.paramReturns
	return fakeReturns.result1
}

func (fake *FakeBlockContainer) ParamCallCount() int {
	fake.paramMutex.RLock()
	defer fake.paramMutex.RUnlock()
	return len(fake.paramArgsForCall)
}

func (fake *FakeBlockContainer) ParamCalls(stub func(basil.ID) interface{}) {
	fake.paramMutex.Lock()
	defer fake.paramMutex.Unlock()
	fake.ParamStub = stub
}

func (fake *FakeBlockContainer) ParamArgsForCall(i int) basil.ID {
	fake.paramMutex.RLock()
	defer fake.paramMutex.RUnlock()
	argsForCall := fake.paramArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBlockContainer) ParamReturns(result1 interface{}) {
	fake.paramMutex.Lock()
	defer fake.paramMutex.Unlock()
	fake.ParamStub = nil
	fake.paramReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeBlockContainer) ParamReturnsOnCall(i int, result1 interface{}) {
	fake.paramMutex.Lock()
	defer fake.paramMutex.Unlock()
	fake.ParamStub = nil
	if fake.paramReturnsOnCall == nil {
		fake.paramReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.paramReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeBlockContainer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.blockMutex.RLock()
	defer fake.blockMutex.RUnlock()
	fake.evaluateChildNodeMutex.RLock()
	defer fake.evaluateChildNodeMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.paramMutex.RLock()
	defer fake.paramMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlockContainer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ basil.BlockContainer = new(FakeBlockContainer)
