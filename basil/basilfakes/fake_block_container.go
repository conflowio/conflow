// Code generated by counterfeiter. DO NOT EDIT.
package basilfakes

import (
	"sync"

	"github.com/opsidian/basil/basil"
	"github.com/opsidian/parsley/parsley"
)

type FakeBlockContainer struct {
	BlockStub        func() basil.Block
	blockMutex       sync.RWMutex
	blockArgsForCall []struct{}
	blockReturns     struct {
		result1 basil.Block
	}
	blockReturnsOnCall map[int]struct {
		result1 basil.Block
	}
	ParamStub        func(basil.ID) interface{}
	paramMutex       sync.RWMutex
	paramArgsForCall []struct {
		arg1 basil.ID
	}
	paramReturns struct {
		result1 interface{}
	}
	paramReturnsOnCall map[int]struct {
		result1 interface{}
	}
	SetParamStub        func(ctx *basil.EvalContext, name basil.ID, node parsley.Node) parsley.Error
	setParamMutex       sync.RWMutex
	setParamArgsForCall []struct {
		ctx  *basil.EvalContext
		name basil.ID
		node parsley.Node
	}
	setParamReturns struct {
		result1 parsley.Error
	}
	setParamReturnsOnCall map[int]struct {
		result1 parsley.Error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlockContainer) Block() basil.Block {
	fake.blockMutex.Lock()
	ret, specificReturn := fake.blockReturnsOnCall[len(fake.blockArgsForCall)]
	fake.blockArgsForCall = append(fake.blockArgsForCall, struct{}{})
	fake.recordInvocation("Block", []interface{}{})
	fake.blockMutex.Unlock()
	if fake.BlockStub != nil {
		return fake.BlockStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.blockReturns.result1
}

func (fake *FakeBlockContainer) BlockCallCount() int {
	fake.blockMutex.RLock()
	defer fake.blockMutex.RUnlock()
	return len(fake.blockArgsForCall)
}

func (fake *FakeBlockContainer) BlockReturns(result1 basil.Block) {
	fake.BlockStub = nil
	fake.blockReturns = struct {
		result1 basil.Block
	}{result1}
}

func (fake *FakeBlockContainer) BlockReturnsOnCall(i int, result1 basil.Block) {
	fake.BlockStub = nil
	if fake.blockReturnsOnCall == nil {
		fake.blockReturnsOnCall = make(map[int]struct {
			result1 basil.Block
		})
	}
	fake.blockReturnsOnCall[i] = struct {
		result1 basil.Block
	}{result1}
}

func (fake *FakeBlockContainer) Param(arg1 basil.ID) interface{} {
	fake.paramMutex.Lock()
	ret, specificReturn := fake.paramReturnsOnCall[len(fake.paramArgsForCall)]
	fake.paramArgsForCall = append(fake.paramArgsForCall, struct {
		arg1 basil.ID
	}{arg1})
	fake.recordInvocation("Param", []interface{}{arg1})
	fake.paramMutex.Unlock()
	if fake.ParamStub != nil {
		return fake.ParamStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.paramReturns.result1
}

func (fake *FakeBlockContainer) ParamCallCount() int {
	fake.paramMutex.RLock()
	defer fake.paramMutex.RUnlock()
	return len(fake.paramArgsForCall)
}

func (fake *FakeBlockContainer) ParamArgsForCall(i int) basil.ID {
	fake.paramMutex.RLock()
	defer fake.paramMutex.RUnlock()
	return fake.paramArgsForCall[i].arg1
}

func (fake *FakeBlockContainer) ParamReturns(result1 interface{}) {
	fake.ParamStub = nil
	fake.paramReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeBlockContainer) ParamReturnsOnCall(i int, result1 interface{}) {
	fake.ParamStub = nil
	if fake.paramReturnsOnCall == nil {
		fake.paramReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.paramReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeBlockContainer) SetParam(ctx *basil.EvalContext, name basil.ID, node parsley.Node) parsley.Error {
	fake.setParamMutex.Lock()
	ret, specificReturn := fake.setParamReturnsOnCall[len(fake.setParamArgsForCall)]
	fake.setParamArgsForCall = append(fake.setParamArgsForCall, struct {
		ctx  *basil.EvalContext
		name basil.ID
		node parsley.Node
	}{ctx, name, node})
	fake.recordInvocation("SetParam", []interface{}{ctx, name, node})
	fake.setParamMutex.Unlock()
	if fake.SetParamStub != nil {
		return fake.SetParamStub(ctx, name, node)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setParamReturns.result1
}

func (fake *FakeBlockContainer) SetParamCallCount() int {
	fake.setParamMutex.RLock()
	defer fake.setParamMutex.RUnlock()
	return len(fake.setParamArgsForCall)
}

func (fake *FakeBlockContainer) SetParamArgsForCall(i int) (*basil.EvalContext, basil.ID, parsley.Node) {
	fake.setParamMutex.RLock()
	defer fake.setParamMutex.RUnlock()
	return fake.setParamArgsForCall[i].ctx, fake.setParamArgsForCall[i].name, fake.setParamArgsForCall[i].node
}

func (fake *FakeBlockContainer) SetParamReturns(result1 parsley.Error) {
	fake.SetParamStub = nil
	fake.setParamReturns = struct {
		result1 parsley.Error
	}{result1}
}

func (fake *FakeBlockContainer) SetParamReturnsOnCall(i int, result1 parsley.Error) {
	fake.SetParamStub = nil
	if fake.setParamReturnsOnCall == nil {
		fake.setParamReturnsOnCall = make(map[int]struct {
			result1 parsley.Error
		})
	}
	fake.setParamReturnsOnCall[i] = struct {
		result1 parsley.Error
	}{result1}
}

func (fake *FakeBlockContainer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.blockMutex.RLock()
	defer fake.blockMutex.RUnlock()
	fake.paramMutex.RLock()
	defer fake.paramMutex.RUnlock()
	fake.setParamMutex.RLock()
	defer fake.setParamMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlockContainer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ basil.BlockContainer = new(FakeBlockContainer)
