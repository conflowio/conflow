// Code generated by counterfeiter. DO NOT EDIT.
package basilfakes

import (
	"sync"

	"github.com/opsidian/basil/basil"
)

type FakeDirective struct {
	ApplyDirectiveStub        func(basil.BlockContext, basil.BlockContainer) error
	applyDirectiveMutex       sync.RWMutex
	applyDirectiveArgsForCall []struct {
		arg1 basil.BlockContext
		arg2 basil.BlockContainer
	}
	applyDirectiveReturns struct {
		result1 error
	}
	applyDirectiveReturnsOnCall map[int]struct {
		result1 error
	}
	EvalStageStub        func() basil.EvalStage
	evalStageMutex       sync.RWMutex
	evalStageArgsForCall []struct {
	}
	evalStageReturns struct {
		result1 basil.EvalStage
	}
	evalStageReturnsOnCall map[int]struct {
		result1 basil.EvalStage
	}
	IDStub        func() basil.ID
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
	}
	iDReturns struct {
		result1 basil.ID
	}
	iDReturnsOnCall map[int]struct {
		result1 basil.ID
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDirective) ApplyDirective(arg1 basil.BlockContext, arg2 basil.BlockContainer) error {
	fake.applyDirectiveMutex.Lock()
	ret, specificReturn := fake.applyDirectiveReturnsOnCall[len(fake.applyDirectiveArgsForCall)]
	fake.applyDirectiveArgsForCall = append(fake.applyDirectiveArgsForCall, struct {
		arg1 basil.BlockContext
		arg2 basil.BlockContainer
	}{arg1, arg2})
	fake.recordInvocation("ApplyDirective", []interface{}{arg1, arg2})
	fake.applyDirectiveMutex.Unlock()
	if fake.ApplyDirectiveStub != nil {
		return fake.ApplyDirectiveStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.applyDirectiveReturns
	return fakeReturns.result1
}

func (fake *FakeDirective) ApplyDirectiveCallCount() int {
	fake.applyDirectiveMutex.RLock()
	defer fake.applyDirectiveMutex.RUnlock()
	return len(fake.applyDirectiveArgsForCall)
}

func (fake *FakeDirective) ApplyDirectiveCalls(stub func(basil.BlockContext, basil.BlockContainer) error) {
	fake.applyDirectiveMutex.Lock()
	defer fake.applyDirectiveMutex.Unlock()
	fake.ApplyDirectiveStub = stub
}

func (fake *FakeDirective) ApplyDirectiveArgsForCall(i int) (basil.BlockContext, basil.BlockContainer) {
	fake.applyDirectiveMutex.RLock()
	defer fake.applyDirectiveMutex.RUnlock()
	argsForCall := fake.applyDirectiveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDirective) ApplyDirectiveReturns(result1 error) {
	fake.applyDirectiveMutex.Lock()
	defer fake.applyDirectiveMutex.Unlock()
	fake.ApplyDirectiveStub = nil
	fake.applyDirectiveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDirective) ApplyDirectiveReturnsOnCall(i int, result1 error) {
	fake.applyDirectiveMutex.Lock()
	defer fake.applyDirectiveMutex.Unlock()
	fake.ApplyDirectiveStub = nil
	if fake.applyDirectiveReturnsOnCall == nil {
		fake.applyDirectiveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyDirectiveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDirective) EvalStage() basil.EvalStage {
	fake.evalStageMutex.Lock()
	ret, specificReturn := fake.evalStageReturnsOnCall[len(fake.evalStageArgsForCall)]
	fake.evalStageArgsForCall = append(fake.evalStageArgsForCall, struct {
	}{})
	fake.recordInvocation("EvalStage", []interface{}{})
	fake.evalStageMutex.Unlock()
	if fake.EvalStageStub != nil {
		return fake.EvalStageStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.evalStageReturns
	return fakeReturns.result1
}

func (fake *FakeDirective) EvalStageCallCount() int {
	fake.evalStageMutex.RLock()
	defer fake.evalStageMutex.RUnlock()
	return len(fake.evalStageArgsForCall)
}

func (fake *FakeDirective) EvalStageCalls(stub func() basil.EvalStage) {
	fake.evalStageMutex.Lock()
	defer fake.evalStageMutex.Unlock()
	fake.EvalStageStub = stub
}

func (fake *FakeDirective) EvalStageReturns(result1 basil.EvalStage) {
	fake.evalStageMutex.Lock()
	defer fake.evalStageMutex.Unlock()
	fake.EvalStageStub = nil
	fake.evalStageReturns = struct {
		result1 basil.EvalStage
	}{result1}
}

func (fake *FakeDirective) EvalStageReturnsOnCall(i int, result1 basil.EvalStage) {
	fake.evalStageMutex.Lock()
	defer fake.evalStageMutex.Unlock()
	fake.EvalStageStub = nil
	if fake.evalStageReturnsOnCall == nil {
		fake.evalStageReturnsOnCall = make(map[int]struct {
			result1 basil.EvalStage
		})
	}
	fake.evalStageReturnsOnCall[i] = struct {
		result1 basil.EvalStage
	}{result1}
}

func (fake *FakeDirective) ID() basil.ID {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
	}{})
	fake.recordInvocation("ID", []interface{}{})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.iDReturns
	return fakeReturns.result1
}

func (fake *FakeDirective) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeDirective) IDCalls(stub func() basil.ID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = stub
}

func (fake *FakeDirective) IDReturns(result1 basil.ID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 basil.ID
	}{result1}
}

func (fake *FakeDirective) IDReturnsOnCall(i int, result1 basil.ID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 basil.ID
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 basil.ID
	}{result1}
}

func (fake *FakeDirective) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyDirectiveMutex.RLock()
	defer fake.applyDirectiveMutex.RUnlock()
	fake.evalStageMutex.RLock()
	defer fake.evalStageMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDirective) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ basil.Directive = new(FakeDirective)
