// Code generated by counterfeiter. DO NOT EDIT.
package basilfakes

import (
	"sync"

	"github.com/opsidian/basil/basil"
)

type FakeBlockDirective struct {
	ApplyToRuntimeConfigStub        func(*basil.RuntimeConfig)
	applyToRuntimeConfigMutex       sync.RWMutex
	applyToRuntimeConfigArgsForCall []struct {
		arg1 *basil.RuntimeConfig
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlockDirective) ApplyToRuntimeConfig(arg1 *basil.RuntimeConfig) {
	fake.applyToRuntimeConfigMutex.Lock()
	fake.applyToRuntimeConfigArgsForCall = append(fake.applyToRuntimeConfigArgsForCall, struct {
		arg1 *basil.RuntimeConfig
	}{arg1})
	fake.recordInvocation("ApplyToRuntimeConfig", []interface{}{arg1})
	fake.applyToRuntimeConfigMutex.Unlock()
	if fake.ApplyToRuntimeConfigStub != nil {
		fake.ApplyToRuntimeConfigStub(arg1)
	}
}

func (fake *FakeBlockDirective) ApplyToRuntimeConfigCallCount() int {
	fake.applyToRuntimeConfigMutex.RLock()
	defer fake.applyToRuntimeConfigMutex.RUnlock()
	return len(fake.applyToRuntimeConfigArgsForCall)
}

func (fake *FakeBlockDirective) ApplyToRuntimeConfigCalls(stub func(*basil.RuntimeConfig)) {
	fake.applyToRuntimeConfigMutex.Lock()
	defer fake.applyToRuntimeConfigMutex.Unlock()
	fake.ApplyToRuntimeConfigStub = stub
}

func (fake *FakeBlockDirective) ApplyToRuntimeConfigArgsForCall(i int) *basil.RuntimeConfig {
	fake.applyToRuntimeConfigMutex.RLock()
	defer fake.applyToRuntimeConfigMutex.RUnlock()
	argsForCall := fake.applyToRuntimeConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBlockDirective) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyToRuntimeConfigMutex.RLock()
	defer fake.applyToRuntimeConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlockDirective) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ basil.BlockDirective = new(FakeBlockDirective)
