// Code generated by Conflow. DO NOT EDIT.

package main

import (
	"fmt"
	"github.com/conflowio/conflow/pkg/conflow"
	"github.com/conflowio/conflow/pkg/conflow/annotations"
	"github.com/conflowio/conflow/pkg/schema"
)

func init() {
	schema.Register(&schema.Object{
		Metadata: schema.Metadata{
			Annotations: map[string]string{
				annotations.Type: "generator",
			},
			ID: "github.com/conflowio/conflow/examples/licensify.FileWalker",
		},
		Properties: map[string]schema.Schema{
			"exclude": &schema.Array{
				Items: &schema.String{},
			},
			"file": &schema.Reference{
				Metadata: schema.Metadata{
					Annotations: map[string]string{
						annotations.EvalStage: "init",
						annotations.Generated: "true",
					},
				},
				Nullable: true,
				Ref:      "github.com/conflowio/conflow/examples/licensify.File",
			},
			"id": &schema.String{
				Metadata: schema.Metadata{
					Annotations: map[string]string{
						annotations.ID: "true",
					},
					ReadOnly: true,
				},
				Format: "conflow.ID",
			},
			"include": &schema.Array{
				Items: &schema.String{},
			},
			"path": &schema.String{},
		},
		Required: []string{"path", "file"},
	})
}

// FileWalkerInterpreter is the Conflow interpreter for the FileWalker block
type FileWalkerInterpreter struct {
}

func (i FileWalkerInterpreter) Schema() schema.Schema {
	s, _ := schema.Get("github.com/conflowio/conflow/examples/licensify.FileWalker")
	return s
}

// Create creates a new FileWalker block
func (i FileWalkerInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	b := &FileWalker{}
	b.id = id
	b.blockPublisher = blockCtx.BlockPublisher()
	return b
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i FileWalkerInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i FileWalkerInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *FileWalker
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i FileWalkerInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "exclude":
		return b.(*FileWalker).exclude
	case "id":
		return b.(*FileWalker).id
	case "include":
		return b.(*FileWalker).include
	case "path":
		return b.(*FileWalker).path
	default:
		panic(fmt.Errorf("unexpected parameter %q in FileWalker", name))
	}
}

func (i FileWalkerInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*FileWalker)
	switch name {
	case "exclude":
		b.exclude = make([]string, len(value.([]interface{})))
		for valuek, valuev := range value.([]interface{}) {
			b.exclude[valuek] = valuev.(string)
		}
	case "include":
		b.include = make([]string, len(value.([]interface{})))
		for valuek, valuev := range value.([]interface{}) {
			b.include[valuek] = valuev.(string)
		}
	case "path":
		b.path = value.(string)
	}
	return nil
}

func (i FileWalkerInterpreter) SetBlock(block conflow.Block, name conflow.ID, key string, value interface{}) error {
	b := block.(*FileWalker)
	switch name {
	case "file":
		b.file = value.(*File)
	}
	return nil
}
