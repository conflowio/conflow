// Code generated by Basil. DO NOT EDIT.
package main

import (
	"fmt"

	"github.com/opsidian/basil/basil"
	"github.com/opsidian/basil/basil/variable"
)

type ExecInterpreter struct{}

// Create creates a new Exec block
func (i ExecInterpreter) CreateBlock(id basil.ID) basil.Block {
	return &Exec{
		id: id,
	}
}

// Params returns with the list of valid parameters
func (i ExecInterpreter) Params() map[basil.ID]basil.ParameterDescriptor {
	return map[basil.ID]basil.ParameterDescriptor{
		"cmd":       {Type: "string", IsRequired: true, IsOutput: false},
		"params":    {Type: "[]string", IsRequired: false, IsOutput: false},
		"dir":       {Type: "string", IsRequired: false, IsOutput: false},
		"env":       {Type: "[]string", IsRequired: false, IsOutput: false},
		"exit_code": {Type: "int", IsRequired: false, IsOutput: true},
		"stdout":    {Type: "string", IsRequired: false, IsOutput: true},
		"stderr":    {Type: "string", IsRequired: false, IsOutput: true},
	}
}

// HasForeignID returns true if the block ID is referencing an other block id
func (i ExecInterpreter) HasForeignID() bool {
	return false
}

// HasShortFormat returns true if the block can be defined in the short block format
func (i ExecInterpreter) ValueParamName() basil.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i ExecInterpreter) ParseContext(ctx *basil.ParseContext) *basil.ParseContext {
	var nilBlock *Exec
	if b, ok := basil.Block(nilBlock).(basil.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i ExecInterpreter) Param(b basil.Block, name basil.ID) interface{} {
	switch name {
	case "id":
		return b.(*Exec).id
	case "cmd":
		return b.(*Exec).cmd
	case "params":
		return b.(*Exec).params
	case "dir":
		return b.(*Exec).dir
	case "env":
		return b.(*Exec).env
	case "exit_code":
		return b.(*Exec).exitCode
	case "stdout":
		return b.(*Exec).stdout
	case "stderr":
		return b.(*Exec).stderr
	default:
		panic(fmt.Errorf("unexpected parameter %q in Exec", name))
	}
}

func (i ExecInterpreter) SetParam(b basil.Block, name basil.ID, value interface{}) error {
	var err error
	switch name {
	case "cmd":
		b.(*Exec).cmd, err = variable.StringValue(value)
	case "params":
		b.(*Exec).params, err = variable.StringArrayValue(value)
	case "dir":
		b.(*Exec).dir, err = variable.StringValue(value)
	case "env":
		b.(*Exec).env, err = variable.StringArrayValue(value)
	}
	return err
}

func (i ExecInterpreter) SetBlock(b basil.Block, name basil.ID, value interface{}) error {
	return nil
}
