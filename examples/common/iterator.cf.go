// Code generated by Conflow. DO NOT EDIT.

package common

import (
	"fmt"
	"github.com/conflowio/conflow/conflow"
	"github.com/conflowio/conflow/conflow/schema"
)

// IteratorInterpreter is the conflow interpreter for the Iterator block
type IteratorInterpreter struct {
	s schema.Schema
}

func (i IteratorInterpreter) Schema() schema.Schema {
	if i.s == nil {
		i.s = &schema.Object{
			Name: "Iterator",
			Properties: map[string]schema.Schema{
				"count": &schema.Integer{},
				"id": &schema.String{
					Metadata: schema.Metadata{
						Annotations: map[string]string{"block.conflow.io/id": "true"},
						ReadOnly:    true,
					},
					Format: "conflow.ID",
				},
				"it": &schema.Reference{
					Metadata: schema.Metadata{
						Annotations: map[string]string{"block.conflow.io/eval_stage": "init", "block.conflow.io/generated": "true"},
						Pointer:     true,
					},
					Ref: "http://conflow.schema/github.com/conflowio/conflow/examples/common.It",
				},
			},
			Required: []string{"count", "it"},
		}
	}
	return i.s
}

// Create creates a new Iterator block
func (i IteratorInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	return &Iterator{
		id:             id,
		blockPublisher: blockCtx.BlockPublisher(),
	}
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i IteratorInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i IteratorInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *Iterator
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i IteratorInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "count":
		return b.(*Iterator).count
	case "id":
		return b.(*Iterator).id
	default:
		panic(fmt.Errorf("unexpected parameter %q in Iterator", name))
	}
}

func (i IteratorInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*Iterator)
	switch name {
	case "count":
		b.count = value.(int64)
	}
	return nil
}

func (i IteratorInterpreter) SetBlock(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*Iterator)
	switch name {
	case "it":
		b.it = value.(*It)
	}
	return nil
}
