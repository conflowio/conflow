// Code generated by Conflow. DO NOT EDIT.

package main

import (
	"fmt"
	"github.com/conflowio/conflow/src/conflow"
	"github.com/conflowio/conflow/src/conflow/schema"
)

// FailInterpreter is the conflow interpreter for the Fail block
type FailInterpreter struct {
	s schema.Schema
}

func (i FailInterpreter) Schema() schema.Schema {
	if i.s == nil {
		i.s = &schema.Object{
			Metadata: schema.Metadata{
				Annotations: map[string]string{"block.conflow.io/type": "task"},
				Description: "It will error for the given tries",
			},
			JSONPropertyNames: map[string]string{"tries_required": "triesRequired"},
			Name:              "Fail",
			Parameters: map[string]schema.Schema{
				"id": &schema.String{
					Metadata: schema.Metadata{
						Annotations: map[string]string{"block.conflow.io/id": "true"},
						ReadOnly:    true,
					},
					Format: "conflow.ID",
				},
				"tries": &schema.Integer{
					Metadata: schema.Metadata{
						Annotations: map[string]string{"block.conflow.io/eval_stage": "close"},
						ReadOnly:    true,
					},
				},
				"tries_required": &schema.Integer{},
			},
			Required: []string{"tries_required"},
		}
	}
	return i.s
}

// Create creates a new Fail block
func (i FailInterpreter) CreateBlock(id conflow.ID, blockCtx *conflow.BlockContext) conflow.Block {
	return &Fail{
		id: id,
	}
}

// ValueParamName returns the name of the parameter marked as value field, if there is one set
func (i FailInterpreter) ValueParamName() conflow.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i FailInterpreter) ParseContext(ctx *conflow.ParseContext) *conflow.ParseContext {
	var nilBlock *Fail
	if b, ok := conflow.Block(nilBlock).(conflow.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i FailInterpreter) Param(b conflow.Block, name conflow.ID) interface{} {
	switch name {
	case "id":
		return b.(*Fail).id
	case "tries":
		return b.(*Fail).tries
	case "tries_required":
		return b.(*Fail).triesRequired
	default:
		panic(fmt.Errorf("unexpected parameter %q in Fail", name))
	}
}

func (i FailInterpreter) SetParam(block conflow.Block, name conflow.ID, value interface{}) error {
	b := block.(*Fail)
	switch name {
	case "tries_required":
		b.triesRequired = value.(int64)
	}
	return nil
}

func (i FailInterpreter) SetBlock(block conflow.Block, name conflow.ID, value interface{}) error {
	return nil
}
