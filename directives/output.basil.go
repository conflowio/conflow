// Code generated by Basil. DO NOT EDIT.
package directives

import (
	"fmt"

	"github.com/opsidian/basil/basil"
	"github.com/opsidian/basil/basil/variable"
)

type OutputInterpreter struct{}

// Create creates a new Output block
func (i OutputInterpreter) CreateBlock(id basil.ID) basil.Block {
	return &Output{
		id: id,
	}
}

// Params returns with the list of valid parameters
func (i OutputInterpreter) Params() map[basil.ID]basil.ParameterDescriptor {
	return map[basil.ID]basil.ParameterDescriptor{
		"type": {
			Type:       "string",
			EvalStage:  basil.EvalStages["main"],
			IsRequired: true,
			IsOutput:   false,
		},
	}
}

// Blocks returns with the list of valid blocks
func (i OutputInterpreter) Blocks() map[basil.ID]basil.BlockDescriptor {
	return nil
}

// HasForeignID returns true if the block ID is referencing an other block id
func (i OutputInterpreter) HasForeignID() bool {
	return false
}

// HasShortFormat returns true if the block can be defined in the short block format
func (i OutputInterpreter) ValueParamName() basil.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i OutputInterpreter) ParseContext(ctx *basil.ParseContext) *basil.ParseContext {
	var nilBlock *Output
	if b, ok := basil.Block(nilBlock).(basil.ParseContextOverrider); ok {
		return ctx.New(b.ParseContextOverride())
	}

	return ctx
}

func (i OutputInterpreter) Param(b basil.Block, name basil.ID) interface{} {
	switch name {
	case "id":
		return b.(*Output).id
	case "type":
		return b.(*Output).outputType
	default:
		panic(fmt.Errorf("unexpected parameter %q in Output", name))
	}
}

func (i OutputInterpreter) SetParam(block basil.Block, name basil.ID, value interface{}) error {
	var err error
	b := block.(*Output)
	switch name {
	case "id":
		b.id, err = variable.IdentifierValue(value)
	case "type":
		b.outputType, err = variable.StringValue(value)
	}
	return err
}

func (i OutputInterpreter) SetBlock(block basil.Block, name basil.ID, value interface{}) error {
	return nil
}

func (i OutputInterpreter) EvalStage() basil.EvalStage {
	var nilBlock *Output
	if b, ok := basil.Block(nilBlock).(basil.EvalStageAware); ok {
		return b.EvalStage()
	}

	return basil.EvalStageUndefined
}
