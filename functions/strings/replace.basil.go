// Code generated by Basil. DO NOT EDIT.

package strings

import (
	"github.com/opsidian/conflow/basil"
	"github.com/opsidian/conflow/basil/schema"
	"github.com/opsidian/parsley/parsley"
)

// ReplaceInterpreter is the basil interpreter for the Replace function
type ReplaceInterpreter struct {
	s schema.Schema
}

func (i ReplaceInterpreter) Schema() schema.Schema {
	if i.s == nil {
		i.s = &schema.Function{
			Metadata: schema.Metadata{
				Description: "It returns a copy of the string s with all\nnon-overlapping instances of old replaced by new.",
			},
			Parameters: schema.Parameters{
				schema.NamedSchema{
					Name:   "s",
					Schema: &schema.String{},
				},
				schema.NamedSchema{
					Name:   "old",
					Schema: &schema.String{},
				},
				schema.NamedSchema{
					Name:   "new",
					Schema: &schema.String{},
				},
			},
			Result: &schema.String{},
		}
	}
	return i.s
}

// Eval returns with the result of the function
func (i ReplaceInterpreter) Eval(ctx interface{}, node basil.FunctionNode) (interface{}, parsley.Error) {
	parameters := i.Schema().(*schema.Function).GetParameters()
	arguments := node.ArgumentNodes()

	arg0, evalErr := parsley.EvaluateNode(ctx, arguments[0])
	if evalErr != nil {
		return nil, evalErr
	}
	if err := parameters[0].Schema.ValidateValue(arg0); err != nil {
		return nil, parsley.NewError(arguments[0].Pos(), err)
	}
	var val0 = arg0.(string)

	arg1, evalErr := parsley.EvaluateNode(ctx, arguments[1])
	if evalErr != nil {
		return nil, evalErr
	}
	if err := parameters[1].Schema.ValidateValue(arg1); err != nil {
		return nil, parsley.NewError(arguments[1].Pos(), err)
	}
	var val1 = arg1.(string)

	arg2, evalErr := parsley.EvaluateNode(ctx, arguments[2])
	if evalErr != nil {
		return nil, evalErr
	}
	if err := parameters[2].Schema.ValidateValue(arg2); err != nil {
		return nil, parsley.NewError(arguments[2].Pos(), err)
	}
	var val2 = arg2.(string)

	return Replace(val0, val1, val2), nil
}
