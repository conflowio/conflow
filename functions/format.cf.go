// Code generated by Conflow. DO NOT EDIT.

package functions

import (
	"github.com/conflowio/conflow/conflow"
	"github.com/conflowio/conflow/conflow/schema"
	"github.com/conflowio/parsley/parsley"
)

// FormatInterpreter is the conflow interpreter for the Format function
type FormatInterpreter struct {
	s schema.Schema
}

func (i FormatInterpreter) Schema() schema.Schema {
	if i.s == nil {
		i.s = &schema.Function{
			Metadata: schema.Metadata{
				Description: "It formats according to a format specifier and returns the resulting string.",
			},
			AdditionalParameters: &schema.NamedSchema{
				Name:   "values",
				Schema: &schema.Untyped{},
			},
			Parameters: schema.Parameters{
				schema.NamedSchema{
					Name:   "format",
					Schema: &schema.String{},
				},
			},
			Result: &schema.String{},
		}
	}
	return i.s
}

// Eval returns with the result of the function
func (i FormatInterpreter) Eval(ctx interface{}, node conflow.FunctionNode) (interface{}, parsley.Error) {
	parameters := i.Schema().(*schema.Function).GetParameters()
	arguments := node.ArgumentNodes()

	arg0, evalErr := parsley.EvaluateNode(ctx, arguments[0])
	if evalErr != nil {
		return nil, evalErr
	}
	if err := parameters[0].Schema.ValidateValue(arg0); err != nil {
		return nil, parsley.NewError(arguments[0].Pos(), err)
	}
	var val0 = arg0.(string)

	var variadicArgs []interface{}
	for p := len(parameters); p < len(arguments); p++ {
		arg, evalErr := parsley.EvaluateNode(ctx, arguments[p])
		if evalErr != nil {
			return nil, evalErr
		}
		if err := i.Schema().(*schema.Function).GetAdditionalParameters().Schema.ValidateValue(arg); err != nil {
			return nil, parsley.NewError(arguments[p].Pos(), err)
		}
		var val = arg
		variadicArgs = append(variadicArgs, val)
	}
	return Format(val0, variadicArgs...), nil
}
