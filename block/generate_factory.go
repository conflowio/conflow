package block

import (
	"bytes"
	"text/template"
)

type Param struct {
	Name      string
	FieldName string
	Type      string
	Required  bool
}

type FactoryTemplateParams struct {
	Package string
	Type    string
	Name    string
	Stages  []string
	Params  map[string][]Param
}

const paramTemplate = `
		if valueNode, ok := s.paramNodes["{{.Name}}"]; ok {
			val, err := valueNode.Value(ctx)
			if err != nil {
				return err
			}
			if val, ok := val.({{.Type}}); ok {
				block.{{.FieldName}} = val
			} else {
				return parsley.NewError(valueNode.Pos(), errors.New("was expecting {{.Type}}"))
			}
		}{{ if .Required }} else {
			return parsley.NewError(s.typeNode.Pos(), errors.New("{{.Name}} parameter is required"))
		}{{ end }}
`

const factoryTemplate = `
// Code generated by ocl generate. DO NOT EDIT.
package {{.Package}}
{{ $dot := .}}
func New{{$dot.Name}}Factory(
	typeNode parsley.Node,
	idNode parsley.Node,
	paramNodes map[string]parsley.Node,
	blockNodes []parsley.Node,
) (ocl.BlockFactory, parsley.Error) {
	return &{{.Name}}Factory{
		typeNode:   typeNode,
		id:         idNode,
		paramNodes: paramNodes,
		blockNodes: blockNodes,
	}, nil
}

type {{$dot.Name}}Factory struct {
	typeNode   parsley.Node
	id         parsley.Node
	paramNodes map[string]parsley.Node
	blockNodes []parsley.Node
}

func (s *{{$dot.Name}}Factory) CreateBlock(ctx interface{}) ocl.Block {
	return &{{$dot.Name}}{}
}

func (s *{{$dot.Name}}Factory) EvalBlock(ctx interface{}, stage string, res interface{}) parsley.Error {
	block, ok := res.(*{{$dot.Name}})
	if !ok {
		panic("result must be a type of *{{$dot.Name}}")
	}

	switch stage {
	{{range $stage := $dot.Stages}}
	case "{{$stage}}":
		{{range index $dot.Params $stage}}
		{{template "block_param" .}}
		{{end}}
	{{end}}
	default:
		{{range index $dot.Params "default"}}
		{{template "block_param" .}}
		{{end}}
	}

	return nil
}

func (*{{$dot.Name}}Factory) Type() string {
	return "{{$dot.Type}}"
}
`

func GenerateFactory(params FactoryTemplateParams) ([]byte, error) {
	tmpl := template.Must(template.New("block_factory").Parse(factoryTemplate))
	paramTmpl := tmpl.New("block_param")
	paramTmpl = template.Must(paramTmpl.Parse(paramTemplate))

	res := &bytes.Buffer{}
	err := tmpl.Execute(res, params)
	if err != nil {
		return nil, err
	}

	return res.Bytes(), nil
}
