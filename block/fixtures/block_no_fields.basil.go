// Code generated by Basil. DO NOT EDIT.
package fixtures

import (
	"fmt"

	"github.com/opsidian/basil/basil"
	"github.com/opsidian/basil/variable"
	"github.com/opsidian/parsley/parsley"
)

type BlockNoFieldsInterpreter struct{}

// Create creates a new BlockNoFields block
func (i BlockNoFieldsInterpreter) Create(ctx *basil.EvalContext, node basil.BlockNode) basil.Block {
	return &BlockNoFields{
		IDField: node.ID(),
	}
}

// Params returns with the list of valid parameters
func (i BlockNoFieldsInterpreter) Params() map[basil.ID]string {
	return nil
}

// RequiredParams returns with the list of required parameters
func (i BlockNoFieldsInterpreter) RequiredParams() map[basil.ID]bool {
	return nil
}

// HasForeignID returns true if the block ID is referencing an other block id
func (i BlockNoFieldsInterpreter) HasForeignID() bool {
	return false
}

// HasShortFormat returns true if the block can be defined in the short block format
func (i BlockNoFieldsInterpreter) ValueParamName() basil.ID {
	return ""
}

// ParseContext returns with the parse context for the block
func (i BlockNoFieldsInterpreter) ParseContext(parentCtx *basil.ParseContext) *basil.ParseContext {
	var nilBlock *BlockNoFields
	if b, ok := basil.Block(nilBlock).(basil.ParseContextAware); ok {
		return b.ParseContext(parentCtx)
	}

	return parentCtx
}

func (i BlockNoFieldsInterpreter) Param(block basil.Block, name basil.ID) interface{} {
	b := block.(*BlockNoFields)

	switch name {
	case "id":
		return b.IDField
	default:
		panic(fmt.Errorf("unexpected parameter %q in BlockNoFields", name))
	}
}

func (i BlockNoFieldsInterpreter) SetParam(ctx *basil.EvalContext, block basil.Block, name basil.ID, node parsley.Node) parsley.Error {
	b := block.(*BlockNoFields)

	switch name {
	case "id":
		var err parsley.Error
		b.IDField, err = variable.NodeIdentifierValue(node, ctx)
		return err
	default:
		panic(fmt.Errorf("unexpected parameter or block %q in BlockNoFields", name))
	}
}
