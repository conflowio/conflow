// Code generated by Basil. DO NOT EDIT.
package fixtures

import (
	"fmt"
	"strings"

	"github.com/opsidian/basil/basil"
	"github.com/opsidian/basil/util"
	"github.com/opsidian/parsley/parsley"
)

// NewBlockSimpleFactory creates a new BlockSimple block factory
func NewBlockSimpleFactory(
	typeNode parsley.Node,
	idNode parsley.Node,
	paramNodes map[string]parsley.Node,
	blockNodes []parsley.Node,
) (basil.BlockFactory, parsley.Error) {
	return &BlockSimpleFactory{
		typeNode:   typeNode,
		idNode:     idNode,
		paramNodes: paramNodes,
		blockNodes: blockNodes,
	}, nil
}

// BlockSimpleFactory will create and evaluate a BlockSimple block
type BlockSimpleFactory struct {
	typeNode    parsley.Node
	idNode      parsley.Node
	paramNodes  map[string]parsley.Node
	blockNodes  []parsley.Node
	shortFormat bool
}

// CreateBlock creates a new BlockSimple block
func (f *BlockSimpleFactory) CreateBlock(parentCtx interface{}) (basil.Block, interface{}, parsley.Error) {
	var err parsley.Error

	block := &BlockSimple{}

	if block.IDField, err = util.NodeStringValue(f.idNode, parentCtx); err != nil {
		return nil, nil, err
	}

	ctx := block.Context(parentCtx)

	if valueNode, ok := f.paramNodes["_value"]; ok {
		f.shortFormat = true

		if block.Value, err = util.NodeAnyValue(valueNode, ctx); err != nil {
			return nil, nil, err
		}
	}

	if len(f.blockNodes) > 0 {
		var childBlockFactory interface{}
		for _, childBlock := range f.blockNodes {
			if childBlockFactory, err = childBlock.Value(ctx); err != nil {
				return nil, nil, err
			}
			panic(fmt.Sprintf("block type %T is not supported in BlockSimple, please open a bug ticket", childBlockFactory))
		}
	}

	return block, ctx, nil
}

// EvalBlock evaluates all fields belonging to the given stage on a BlockSimple block
func (f *BlockSimpleFactory) EvalBlock(ctx interface{}, stage string, res basil.Block) parsley.Error {
	var err parsley.Error

	if preInterpreter, ok := res.(basil.BlockPreInterpreter); ok {
		if err = preInterpreter.PreEval(ctx, stage); err != nil {
			return err
		}
	}

	block, ok := res.(*BlockSimple)
	if !ok {
		panic("result must be a type of *BlockSimple")
	}

	validParamNames := map[string]struct{}{
		"value": struct{}{},
	}

	for paramName, paramNode := range f.paramNodes {
		if !strings.HasPrefix(paramName, "_") {
			if _, valid := validParamNames[paramName]; !valid {
				return parsley.NewError(paramNode.Pos(), fmt.Errorf("%q parameter does not exist", paramName))
			}
		}
	}

	if !f.shortFormat {
		switch stage {
		case "default":
			if valueNode, ok := f.paramNodes["value"]; ok {
				if block.Value, err = util.NodeAnyValue(valueNode, ctx); err != nil {
					return err
				}
			}
		default:
			panic(fmt.Sprintf("unknown stage: %s", stage))
		}

		switch stage {
		case "default":
		default:
			panic(fmt.Sprintf("unknown stage: %s", stage))
		}
	}

	if postInterpreter, ok := res.(basil.BlockPostInterpreter); ok {
		if err = postInterpreter.PostEval(ctx, stage); err != nil {
			return err
		}
	}

	return nil
}

// HasForeignID returns true if the block ID is referencing an other block id
func (f *BlockSimpleFactory) HasForeignID() bool {
	return false
}

// HasShortFormat returns true if the block can be defined in the short block format
func (f *BlockSimpleFactory) HasShortFormat() bool {
	return true
}
