// Code generated by counterfeiter. DO NOT EDIT.
package blockfakes

import (
	"sync"

	"github.com/opsidian/basil/basil"
	"github.com/opsidian/basil/block"
	"github.com/opsidian/parsley/parsley"
)

type FakeInterpreter struct {
	CreateStub        func(ctx *basil.EvalContext, node basil.BlockNode) basil.Block
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		ctx  *basil.EvalContext
		node basil.BlockNode
	}
	createReturns struct {
		result1 basil.Block
	}
	createReturnsOnCall map[int]struct {
		result1 basil.Block
	}
	UpdateStub        func(ctx *basil.EvalContext, b basil.Block, name basil.ID, node parsley.Node) parsley.Error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		ctx  *basil.EvalContext
		b    basil.Block
		name basil.ID
		node parsley.Node
	}
	updateReturns struct {
		result1 parsley.Error
	}
	updateReturnsOnCall map[int]struct {
		result1 parsley.Error
	}
	ParamsStub        func() map[basil.ID]string
	paramsMutex       sync.RWMutex
	paramsArgsForCall []struct{}
	paramsReturns     struct {
		result1 map[basil.ID]string
	}
	paramsReturnsOnCall map[int]struct {
		result1 map[basil.ID]string
	}
	RequiredParamsStub        func() map[basil.ID]bool
	requiredParamsMutex       sync.RWMutex
	requiredParamsArgsForCall []struct{}
	requiredParamsReturns     struct {
		result1 map[basil.ID]bool
	}
	requiredParamsReturnsOnCall map[int]struct {
		result1 map[basil.ID]bool
	}
	ValueParamNameStub        func() basil.ID
	valueParamNameMutex       sync.RWMutex
	valueParamNameArgsForCall []struct{}
	valueParamNameReturns     struct {
		result1 basil.ID
	}
	valueParamNameReturnsOnCall map[int]struct {
		result1 basil.ID
	}
	HasForeignIDStub        func() bool
	hasForeignIDMutex       sync.RWMutex
	hasForeignIDArgsForCall []struct{}
	hasForeignIDReturns     struct {
		result1 bool
	}
	hasForeignIDReturnsOnCall map[int]struct {
		result1 bool
	}
	ParamStub        func(basil.Block, basil.ID) interface{}
	paramMutex       sync.RWMutex
	paramArgsForCall []struct {
		arg1 basil.Block
		arg2 basil.ID
	}
	paramReturns struct {
		result1 interface{}
	}
	paramReturnsOnCall map[int]struct {
		result1 interface{}
	}
	ParseContextStub        func(*basil.ParseContext) *basil.ParseContext
	parseContextMutex       sync.RWMutex
	parseContextArgsForCall []struct {
		arg1 *basil.ParseContext
	}
	parseContextReturns struct {
		result1 *basil.ParseContext
	}
	parseContextReturnsOnCall map[int]struct {
		result1 *basil.ParseContext
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInterpreter) Create(ctx *basil.EvalContext, node basil.BlockNode) basil.Block {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		ctx  *basil.EvalContext
		node basil.BlockNode
	}{ctx, node})
	fake.recordInvocation("Create", []interface{}{ctx, node})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(ctx, node)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *FakeInterpreter) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeInterpreter) CreateArgsForCall(i int) (*basil.EvalContext, basil.BlockNode) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].ctx, fake.createArgsForCall[i].node
}

func (fake *FakeInterpreter) CreateReturns(result1 basil.Block) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 basil.Block
	}{result1}
}

func (fake *FakeInterpreter) CreateReturnsOnCall(i int, result1 basil.Block) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 basil.Block
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 basil.Block
	}{result1}
}

func (fake *FakeInterpreter) Update(ctx *basil.EvalContext, b basil.Block, name basil.ID, node parsley.Node) parsley.Error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		ctx  *basil.EvalContext
		b    basil.Block
		name basil.ID
		node parsley.Node
	}{ctx, b, name, node})
	fake.recordInvocation("Update", []interface{}{ctx, b, name, node})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(ctx, b, name, node)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateReturns.result1
}

func (fake *FakeInterpreter) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeInterpreter) UpdateArgsForCall(i int) (*basil.EvalContext, basil.Block, basil.ID, parsley.Node) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].ctx, fake.updateArgsForCall[i].b, fake.updateArgsForCall[i].name, fake.updateArgsForCall[i].node
}

func (fake *FakeInterpreter) UpdateReturns(result1 parsley.Error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 parsley.Error
	}{result1}
}

func (fake *FakeInterpreter) UpdateReturnsOnCall(i int, result1 parsley.Error) {
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 parsley.Error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 parsley.Error
	}{result1}
}

func (fake *FakeInterpreter) Params() map[basil.ID]string {
	fake.paramsMutex.Lock()
	ret, specificReturn := fake.paramsReturnsOnCall[len(fake.paramsArgsForCall)]
	fake.paramsArgsForCall = append(fake.paramsArgsForCall, struct{}{})
	fake.recordInvocation("Params", []interface{}{})
	fake.paramsMutex.Unlock()
	if fake.ParamsStub != nil {
		return fake.ParamsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.paramsReturns.result1
}

func (fake *FakeInterpreter) ParamsCallCount() int {
	fake.paramsMutex.RLock()
	defer fake.paramsMutex.RUnlock()
	return len(fake.paramsArgsForCall)
}

func (fake *FakeInterpreter) ParamsReturns(result1 map[basil.ID]string) {
	fake.ParamsStub = nil
	fake.paramsReturns = struct {
		result1 map[basil.ID]string
	}{result1}
}

func (fake *FakeInterpreter) ParamsReturnsOnCall(i int, result1 map[basil.ID]string) {
	fake.ParamsStub = nil
	if fake.paramsReturnsOnCall == nil {
		fake.paramsReturnsOnCall = make(map[int]struct {
			result1 map[basil.ID]string
		})
	}
	fake.paramsReturnsOnCall[i] = struct {
		result1 map[basil.ID]string
	}{result1}
}

func (fake *FakeInterpreter) RequiredParams() map[basil.ID]bool {
	fake.requiredParamsMutex.Lock()
	ret, specificReturn := fake.requiredParamsReturnsOnCall[len(fake.requiredParamsArgsForCall)]
	fake.requiredParamsArgsForCall = append(fake.requiredParamsArgsForCall, struct{}{})
	fake.recordInvocation("RequiredParams", []interface{}{})
	fake.requiredParamsMutex.Unlock()
	if fake.RequiredParamsStub != nil {
		return fake.RequiredParamsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.requiredParamsReturns.result1
}

func (fake *FakeInterpreter) RequiredParamsCallCount() int {
	fake.requiredParamsMutex.RLock()
	defer fake.requiredParamsMutex.RUnlock()
	return len(fake.requiredParamsArgsForCall)
}

func (fake *FakeInterpreter) RequiredParamsReturns(result1 map[basil.ID]bool) {
	fake.RequiredParamsStub = nil
	fake.requiredParamsReturns = struct {
		result1 map[basil.ID]bool
	}{result1}
}

func (fake *FakeInterpreter) RequiredParamsReturnsOnCall(i int, result1 map[basil.ID]bool) {
	fake.RequiredParamsStub = nil
	if fake.requiredParamsReturnsOnCall == nil {
		fake.requiredParamsReturnsOnCall = make(map[int]struct {
			result1 map[basil.ID]bool
		})
	}
	fake.requiredParamsReturnsOnCall[i] = struct {
		result1 map[basil.ID]bool
	}{result1}
}

func (fake *FakeInterpreter) ValueParamName() basil.ID {
	fake.valueParamNameMutex.Lock()
	ret, specificReturn := fake.valueParamNameReturnsOnCall[len(fake.valueParamNameArgsForCall)]
	fake.valueParamNameArgsForCall = append(fake.valueParamNameArgsForCall, struct{}{})
	fake.recordInvocation("ValueParamName", []interface{}{})
	fake.valueParamNameMutex.Unlock()
	if fake.ValueParamNameStub != nil {
		return fake.ValueParamNameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.valueParamNameReturns.result1
}

func (fake *FakeInterpreter) ValueParamNameCallCount() int {
	fake.valueParamNameMutex.RLock()
	defer fake.valueParamNameMutex.RUnlock()
	return len(fake.valueParamNameArgsForCall)
}

func (fake *FakeInterpreter) ValueParamNameReturns(result1 basil.ID) {
	fake.ValueParamNameStub = nil
	fake.valueParamNameReturns = struct {
		result1 basil.ID
	}{result1}
}

func (fake *FakeInterpreter) ValueParamNameReturnsOnCall(i int, result1 basil.ID) {
	fake.ValueParamNameStub = nil
	if fake.valueParamNameReturnsOnCall == nil {
		fake.valueParamNameReturnsOnCall = make(map[int]struct {
			result1 basil.ID
		})
	}
	fake.valueParamNameReturnsOnCall[i] = struct {
		result1 basil.ID
	}{result1}
}

func (fake *FakeInterpreter) HasForeignID() bool {
	fake.hasForeignIDMutex.Lock()
	ret, specificReturn := fake.hasForeignIDReturnsOnCall[len(fake.hasForeignIDArgsForCall)]
	fake.hasForeignIDArgsForCall = append(fake.hasForeignIDArgsForCall, struct{}{})
	fake.recordInvocation("HasForeignID", []interface{}{})
	fake.hasForeignIDMutex.Unlock()
	if fake.HasForeignIDStub != nil {
		return fake.HasForeignIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.hasForeignIDReturns.result1
}

func (fake *FakeInterpreter) HasForeignIDCallCount() int {
	fake.hasForeignIDMutex.RLock()
	defer fake.hasForeignIDMutex.RUnlock()
	return len(fake.hasForeignIDArgsForCall)
}

func (fake *FakeInterpreter) HasForeignIDReturns(result1 bool) {
	fake.HasForeignIDStub = nil
	fake.hasForeignIDReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInterpreter) HasForeignIDReturnsOnCall(i int, result1 bool) {
	fake.HasForeignIDStub = nil
	if fake.hasForeignIDReturnsOnCall == nil {
		fake.hasForeignIDReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasForeignIDReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInterpreter) Param(arg1 basil.Block, arg2 basil.ID) interface{} {
	fake.paramMutex.Lock()
	ret, specificReturn := fake.paramReturnsOnCall[len(fake.paramArgsForCall)]
	fake.paramArgsForCall = append(fake.paramArgsForCall, struct {
		arg1 basil.Block
		arg2 basil.ID
	}{arg1, arg2})
	fake.recordInvocation("Param", []interface{}{arg1, arg2})
	fake.paramMutex.Unlock()
	if fake.ParamStub != nil {
		return fake.ParamStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.paramReturns.result1
}

func (fake *FakeInterpreter) ParamCallCount() int {
	fake.paramMutex.RLock()
	defer fake.paramMutex.RUnlock()
	return len(fake.paramArgsForCall)
}

func (fake *FakeInterpreter) ParamArgsForCall(i int) (basil.Block, basil.ID) {
	fake.paramMutex.RLock()
	defer fake.paramMutex.RUnlock()
	return fake.paramArgsForCall[i].arg1, fake.paramArgsForCall[i].arg2
}

func (fake *FakeInterpreter) ParamReturns(result1 interface{}) {
	fake.ParamStub = nil
	fake.paramReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeInterpreter) ParamReturnsOnCall(i int, result1 interface{}) {
	fake.ParamStub = nil
	if fake.paramReturnsOnCall == nil {
		fake.paramReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.paramReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeInterpreter) ParseContext(arg1 *basil.ParseContext) *basil.ParseContext {
	fake.parseContextMutex.Lock()
	ret, specificReturn := fake.parseContextReturnsOnCall[len(fake.parseContextArgsForCall)]
	fake.parseContextArgsForCall = append(fake.parseContextArgsForCall, struct {
		arg1 *basil.ParseContext
	}{arg1})
	fake.recordInvocation("ParseContext", []interface{}{arg1})
	fake.parseContextMutex.Unlock()
	if fake.ParseContextStub != nil {
		return fake.ParseContextStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.parseContextReturns.result1
}

func (fake *FakeInterpreter) ParseContextCallCount() int {
	fake.parseContextMutex.RLock()
	defer fake.parseContextMutex.RUnlock()
	return len(fake.parseContextArgsForCall)
}

func (fake *FakeInterpreter) ParseContextArgsForCall(i int) *basil.ParseContext {
	fake.parseContextMutex.RLock()
	defer fake.parseContextMutex.RUnlock()
	return fake.parseContextArgsForCall[i].arg1
}

func (fake *FakeInterpreter) ParseContextReturns(result1 *basil.ParseContext) {
	fake.ParseContextStub = nil
	fake.parseContextReturns = struct {
		result1 *basil.ParseContext
	}{result1}
}

func (fake *FakeInterpreter) ParseContextReturnsOnCall(i int, result1 *basil.ParseContext) {
	fake.ParseContextStub = nil
	if fake.parseContextReturnsOnCall == nil {
		fake.parseContextReturnsOnCall = make(map[int]struct {
			result1 *basil.ParseContext
		})
	}
	fake.parseContextReturnsOnCall[i] = struct {
		result1 *basil.ParseContext
	}{result1}
}

func (fake *FakeInterpreter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.paramsMutex.RLock()
	defer fake.paramsMutex.RUnlock()
	fake.requiredParamsMutex.RLock()
	defer fake.requiredParamsMutex.RUnlock()
	fake.valueParamNameMutex.RLock()
	defer fake.valueParamNameMutex.RUnlock()
	fake.hasForeignIDMutex.RLock()
	defer fake.hasForeignIDMutex.RUnlock()
	fake.paramMutex.RLock()
	defer fake.paramMutex.RUnlock()
	fake.parseContextMutex.RLock()
	defer fake.parseContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInterpreter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ block.Interpreter = new(FakeInterpreter)
