package generator

type InterpreterTemplateParams struct {
	Package                string
	Type                   string
	Name                   string
	HasForeignID           bool
	Stages                 []string
	ParamTypes             map[string]string
	BlockTypes             map[string]string
	NodeTypes              map[string]string
	IDField                *Field
	ValueField             *Field
	Fields                 []*Field
	NodeValueFunctionNames map[string]string
	EvalFieldsCnt          int
	RequiredFieldsCnt      int
}

const interpreterTemplate = `
// Code generated by Basil. DO NOT EDIT.
package {{.Package}}

import (
	"fmt"

	"github.com/opsidian/basil/basil"
	"github.com/opsidian/basil/util"
	"github.com/opsidian/basil/variable"
	"github.com/opsidian/parsley/parsley"
)

{{ $root := .}}

type {{$root.Name}}Interpreter struct {}

// Create creates a new {{$root.Name}} block
func (i {{$root.Name}}Interpreter) Create(ctx *basil.EvalContext, node basil.BlockNode) basil.Block {
	return &{{$root.Name}}{
		{{.IDField.Name}}: node.ID(),
	}
}

// Params returns with the list of valid parameters
func (i {{$root.Name}}Interpreter) Params() map[basil.ID]string {
	{{ if .ParamTypes -}}
	return map[basil.ID]string{
		{{ range $paramName, $paramType := $root.ParamTypes -}}
		"{{$paramName}}": "{{$paramType}}",
		{{ end -}}
	}
	{{ else -}}
	return nil
	{{ end -}}
}

// RequiredParams returns with the list of required parameters
func (i {{$root.Name}}Interpreter) RequiredParams() map[basil.ID]bool {
	{{ if .RequiredFieldsCnt -}}
	return map[basil.ID]bool{
		{{ range $root.Fields -}}{{ if and (.Required) (not .IsID) (not .IsNode) (not .IsBlock) -}}
		"{{.ParamName}}": false,
		{{ end }}{{ end -}}
	}
	{{ else -}}
	return nil
	{{ end -}}
}

// HasForeignID returns true if the block ID is referencing an other block id
func (i {{$root.Name}}Interpreter) HasForeignID() bool {
	return {{.HasForeignID}}
}

// HasShortFormat returns true if the block can be defined in the short block format
func (i {{$root.Name}}Interpreter) ValueParamName() basil.ID {
	return {{ if .ValueField }}"{{.ValueField.ParamName}}"{{ else }}""{{ end }}
}

// ParseContext returns with the parse context for the block
func (i {{$root.Name}}Interpreter) ParseContext(parentCtx *basil.ParseContext) *basil.ParseContext {
	var nilBlock *{{$root.Name}}
	if b, ok := basil.Block(nilBlock).(basil.ParseContextAware); ok {
		return b.ParseContext(parentCtx)
	}

	return parentCtx
}

func (i {{$root.Name}}Interpreter) Param(block basil.Block, name basil.ID) interface{} {
	b := block.(*{{$root.Name}})

	switch name {
	{{ range $root.Fields }}{{ if or .IsParam .IsID -}}
	case "{{.ParamName}}":
		return b.{{.Name}}
	{{ end }}{{ end -}}
	default:
		panic(fmt.Errorf("unexpected parameter %q in {{$root.Name}}", name))
	}
}

func (i {{$root.Name}}Interpreter) SetParam(ctx *basil.EvalContext, block basil.Block, name basil.ID, node parsley.Node) parsley.Error {
	b := block.(*{{$root.Name}})

	switch name {
	{{ range $root.Fields -}}
	{{ if or .IsParam .IsID -}}
	case "{{.ParamName}}":
		var err parsley.Error
		b.{{.Name}}, err = variable.{{index $root.NodeValueFunctionNames .Type}}(node, ctx)
		return err
	{{ end -}}
	{{ if .IsBlock -}}
	case "{{.ParamName}}":
		value, err := node.Value(ctx)
		if err != nil {
			return err
		}
		b.{{.Name}} = append(b.{{.Name}}, value.({{trimPrefix .Type "[]" }}))
		return nil
	{{ end -}}
	{{ end -}}
	default:
		panic(fmt.Errorf("unexpected parameter or block %q in {{$root.Name}}", name))
	}
}

`
